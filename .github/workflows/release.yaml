name: Release

on:
    push:
        tags:
            - 'release/*'

jobs:
    create_release:
        name: Create release
        runs-on: ubuntu-latest
        outputs:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
        steps:
            - name: Create release
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ github.ref }}
                  release_name: ${{ github.ref }}
                  draft: false
                  prerelease: true

    build_redwood:
        name: Build Redwood
        needs: create_release
        strategy:
            fail-fast: false
            matrix:
                platform: [ubuntu-latest, macos-11, macos-10.15, windows-latest]
                include:
                    - platform:    ubuntu-latest
                      app_name:    redwood
                      zip_name:    redwood-ubuntu.zip
                      go_exe:      go
                      build_flags:
                    - platform:    macos-11
                      app_name:    redwood
                      zip_name:    redwood-macos-11.zip
                      go_exe:      go
                      build_flags:
                    - platform:    macos-10.15
                      app_name:    redwood
                      zip_name:    redwood-macos-10.15.zip
                      go_exe:      go
                      build_flags:
                    - platform:    windows-latest
                      app_name:    redwood.exe
                      zip_name:    redwood-windows-latest.zip
                      go_exe:      go
                      build_flags: --tags otto
        runs-on: ${{ matrix.platform }}
        steps:
            - name: Checkout the repo
              uses: actions/checkout@v2

            - uses: actions/setup-go@v2
              with:
                go-version: '^1.18.x'

            - name: Set GOPATH
              run:  echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
              if:   ${{ matrix.platform == 'ubuntu-latest' || matrix.platform == 'macos-10.15' || matrix.platform == 'macos-11' }}

            - name: Set GOPATH
              run:  echo "GOPATH=$(go env GOPATH)" >> $env:GITHUB_ENV
              if:   ${{ matrix.platform == 'windows-latest' }}

            - name: Cache Go vendor packages
              uses: actions/cache@v2
              with:
                  path: ${{ env.GOPATH }}
                  key: redwood-${{ matrix.platform }}-go-mod-${{ hashFiles('go.mod') }}
                  restore-keys: |
                    go-mod-${{ hashFiles('go.mod') }}
                    go-mod-

            - name: Download Go vendor packages
              run:  ${{ matrix.go_exe }} mod download

            - name: Get Yarn cache directory path
              id:   yarn-cache-dir-path
              run:  echo "::set-output name=dir::$(yarn cache dir)"

            - name: Cache redwood.js dependencies
              uses: actions/cache@v2
              with:
                  path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: yarn-redwood.js-${{ hashFiles('./embed/yarn.lock') }}
                  restore-keys: |
                    yarn-redwood.js-${{ hashFiles('./embed/yarn.lock') }}
                    yarn-redwood.js-

            - name: Download redwood.js
              run:  yarn
              working-directory: embed

            - name: Build redwood
              run:  ${{ matrix.go_exe }} build ${{ matrix.build_flags }} -o ./${{ matrix.app_name }} .
              working-directory: cmd/redwood

            - name: Zip (Linux + macOS)
              run:  zip -qq -r ${{ matrix.zip_name }} ${{ matrix.app_name }}
              if:   ${{ matrix.platform == 'macos-11' || matrix.platform == 'macos-10.15' || matrix.platform == 'ubuntu-latest' }}
              working-directory: cmd/redwood

            - name: Zip (Windows)
              run:  Compress-Archive -LiteralPath ${{ matrix.app_name }} -DestinationPath ${{ matrix.zip_name }}
              if:   ${{ matrix.platform == 'windows-latest' }}
              working-directory: cmd/redwood

            - name: Upload artifacts
              uses: actions/upload-artifact@v2
              with:
                  name: ${{ matrix.zip_name }}
                  path: cmd/redwood/${{ matrix.zip_name }}

            - name: Upload release assets
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ needs.create_release.outputs.upload_url }}
                  asset_name: ${{ matrix.zip_name }}
                  asset_path: cmd/redwood/${{ matrix.zip_name }}
                  asset_content_type: application/zip



    build_hush:
        name: Build Hush (Linux/Windows)
        needs: create_release
        strategy:
            fail-fast: false

        runs-on: ubuntu-latest
        steps:
            - name: Checkout the repo
              uses: actions/checkout@v2

            - uses: actions/setup-go@v2
              with:
                go-version: '^1.18.x'

            - name: Install mingw-64
              run:  sudo apt install -y gcc-mingw32 mingw32-binutils mingw-w64

            - name: Set GOPATH
              run:  echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV

            - name: Cache Go vendor packages
              uses: actions/cache@v2
              with:
                  path: ${{ env.GOPATH }}
                  key: go-mod-${{ hashFiles('demos/desktop-chat-app/go.mod') }}
                  restore-keys: |
                    go-mod-${{ hashFiles('demos/desktop-chat-app/go.mod') }}
                    go-mod-

            - name: Download Go vendor packages
              run:  ${{ matrix.go_exe }} mod download
              working-directory: demos/desktop-chat-app

            - name: Get Yarn cache directory path
              id:   yarn-cache-dir-path
              run:  echo "::set-output name=dir::$(yarn cache dir)"

            - name: Cache redwood.js dependencies
              uses: actions/cache@v2
              with:
                  path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: yarn-redwood.js-${{ hashFiles('./embed/yarn.lock') }}
                  restore-keys: |
                    yarn-redwood.js-${{ hashFiles('./embed/yarn.lock') }}
                    yarn-redwood.js-

            - name: Download redwood.js
              run: yarn
              working-directory: embed

            - name: Cache desktop-chat-app/frontend dependencies
              uses: actions/cache@v2
              with:
                  path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: yarn-hush-${{ hashFiles('./demos/desktop-chat-app/frontend/yarn.lock') }}
                  restore-keys: |
                    yarn-hush-${{ hashFiles('./demos/desktop-chat-app/frontend/yarn.lock') }}
                    yarn-hush-

            - name: Install desktop-chat-app/frontend dependencies
              run:  yarn install --frozen-lockfile --prefer-offline
              working-directory: demos/desktop-chat-app/frontend

            - name: Build frontend
              run:  yarn build
              working-directory: demos/desktop-chat-app/frontend

            - name: Install go-astilectron-bundler
              run:  go get -u github.com/asticode/go-astilectron-bundler/... && go install github.com/asticode/go-astilectron-bundler/astilectron-bundler

            - name: go mod tidy
              run:  go mod tidy

            - name: Build Hush
              run:  astilectron-bundler
              working-directory: demos/desktop-chat-app

            - name: Zip (Linux)
              run:  zip -qq -r hush-linux.zip ./output/linux-amd64/Hush
              working-directory: demos/desktop-chat-app

            - name: Zip (Windows)
              run:  zip -qq -r hush-windows.zip ./output/windows-amd64/Hush.exe
              working-directory: demos/desktop-chat-app

            - name: Upload artifacts (Linux)
              uses: actions/upload-artifact@v2
              with:
                  name: hush-linux.zip
                  path: demos/desktop-chat-app/hush-linux.zip

            - name: Upload artifacts (Windows)
              uses: actions/upload-artifact@v2
              with:
                  name: hush-windows.zip
                  path: demos/desktop-chat-app/hush-windows.zip

            - name: Upload release assets (Linux)
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ needs.create_release.outputs.upload_url }}
                  asset_name: hush-linux.zip
                  asset_path: demos/desktop-chat-app/hush-linux.zip
                  asset_content_type: application/zip

            - name: Upload release assets (Windows)
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ needs.create_release.outputs.upload_url }}
                  asset_name: hush-windows.zip
                  asset_path: demos/desktop-chat-app/hush-windows.zip
                  asset_content_type: application/zip


    build_hush_macos:
        name: Build Hush (macOS)
        needs: create_release
        strategy:
            fail-fast: false

        runs-on: macos-latest
        steps:
            - name: Checkout the repo
              uses: actions/checkout@v2

            - uses: actions/setup-go@v2
              with:
                go-version: '^1.18.x'

            - name: Set GOPATH
              run:  echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV

            - name: Cache Go vendor packages
              uses: actions/cache@v2
              with:
                  path: ${{ env.GOPATH }}
                  key: go-mod-${{ hashFiles('demos/desktop-chat-app/go.mod') }}
                  restore-keys: |
                    go-mod-${{ hashFiles('demos/desktop-chat-app/go.mod') }}
                    go-mod-

            - name: Download Go vendor packages
              run:  ${{ matrix.go_exe }} mod download
              working-directory: demos/desktop-chat-app

            - name: Get Yarn cache directory path
              id:   yarn-cache-dir-path
              run:  echo "::set-output name=dir::$(yarn cache dir)"

            - name: Cache redwood.js dependencies
              uses: actions/cache@v2
              with:
                  path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: yarn-redwood.js-${{ hashFiles('./embed/yarn.lock') }}
                  restore-keys: |
                    yarn-redwood.js-${{ hashFiles('./embed/yarn.lock') }}
                    yarn-redwood.js-

            - name: Download redwood.js
              run: yarn
              working-directory: embed

            - name: Cache desktop-chat-app/frontend dependencies
              uses: actions/cache@v2
              with:
                  path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: yarn-hush-${{ hashFiles('./demos/desktop-chat-app/frontend/yarn.lock') }}
                  restore-keys: |
                    yarn-hush-${{ hashFiles('./demos/desktop-chat-app/frontend/yarn.lock') }}
                    yarn-hush-

            - name: Install desktop-chat-app/frontend dependencies
              run:  yarn install --frozen-lockfile --prefer-offline
              working-directory: demos/desktop-chat-app/frontend

            - name: Build frontend
              run:  yarn build
              working-directory: demos/desktop-chat-app/frontend

            - name: Install go-astilectron-bundler
              run:  go get -u github.com/asticode/go-astilectron-bundler/... && go install github.com/asticode/go-astilectron-bundler/astilectron-bundler

            - name: go mod tidy
              run:  go mod tidy

            - name: Build Hush
              run:  astilectron-bundler -c bundler-macos.json
              working-directory: demos/desktop-chat-app

            - name: Zip (macOS amd64)
              run:  zip -qq -r hush-macos-amd64.zip ./output/darwin-amd64/Hush.app
              working-directory: demos/desktop-chat-app

            - name: Zip (macOS arm64)
              run:  zip -qq -r hush-macos-arm64.zip ./output/darwin-arm64/Hush.app
              working-directory: demos/desktop-chat-app

            - name: Upload artifacts (macOS amd64)
              uses: actions/upload-artifact@v2
              with:
                  name: hush-macos-amd64.zip
                  path: demos/desktop-chat-app/hush-macos-amd64.zip

            - name: Upload artifacts (macOS arm64)
              uses: actions/upload-artifact@v2
              with:
                  name: hush-macos-arm64.zip
                  path: demos/desktop-chat-app/hush-macos-arm64.zip

            - name: Upload release assets (macOS amd64)
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ needs.create_release.outputs.upload_url }}
                  asset_name: hush-macos-amd64.zip
                  asset_path: demos/desktop-chat-app/hush-macos-amd64.zip
                  asset_content_type: application/zip

            - name: Upload release assets (macOS arm64)
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ needs.create_release.outputs.upload_url }}
                  asset_name: hush-macos-arm64.zip
                  asset_path: demos/desktop-chat-app/hush-macos-arm64.zip
                  asset_content_type: application/zip


