// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hush.proto

package pb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	redwood_dev_types "redwood.dev/types"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type KeyBundle struct {
	IdentityKey  *X3DHPrivateKey           `protobuf:"bytes,1,opt,name=identityKey,proto3,customtype=X3DHPrivateKey" json:"identityKey,omitempty" tree:"identityKey"`
	SignedPreKey *X3DHPrivateKey           `protobuf:"bytes,2,opt,name=signedPreKey,proto3,customtype=X3DHPrivateKey" json:"signedPreKey,omitempty" tree:"signedPreKey"`
	RatchetKey   *RatchetPrivateKey        `protobuf:"bytes,3,opt,name=ratchetKey,proto3,customtype=RatchetPrivateKey" json:"ratchetKey,omitempty" tree:"ratchetKey"`
	Revoked      bool                      `protobuf:"varint,4,opt,name=revoked,proto3" json:"revoked,omitempty" tree:"revoked"`
	Address      redwood_dev_types.Address `protobuf:"bytes,5,opt,name=address,proto3,customtype=redwood.dev/types.Address" json:"address" tree:"address"`
	CreatedAt    uint64                    `protobuf:"varint,6,opt,name=createdAt,proto3" json:"createdAt,omitempty" tree:"createdAt"`
}

func (m *KeyBundle) Reset()      { *m = KeyBundle{} }
func (*KeyBundle) ProtoMessage() {}
func (*KeyBundle) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea3ebb9f2bccf9bd, []int{0}
}
func (m *KeyBundle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyBundle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyBundle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyBundle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyBundle.Merge(m, src)
}
func (m *KeyBundle) XXX_Size() int {
	return m.Size()
}
func (m *KeyBundle) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyBundle.DiscardUnknown(m)
}

var xxx_messageInfo_KeyBundle proto.InternalMessageInfo

func (m *KeyBundle) GetRevoked() bool {
	if m != nil {
		return m.Revoked
	}
	return false
}

func (m *KeyBundle) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

type PubkeyBundle struct {
	IdentityPubkey     *X3DHPublicKey    `protobuf:"bytes,1,opt,name=identityPubkey,proto3,customtype=X3DHPublicKey" json:"identityPubkey,omitempty" tree:"identityPubkey"`
	SignedPreKeyPubkey *X3DHPublicKey    `protobuf:"bytes,2,opt,name=signedPreKeyPubkey,proto3,customtype=X3DHPublicKey" json:"signedPreKeyPubkey,omitempty" tree:"signedPreKeyPubkey"`
	RatchetPubkey      *RatchetPublicKey `protobuf:"bytes,3,opt,name=ratchetPubkey,proto3,customtype=RatchetPublicKey" json:"ratchetPubkey,omitempty" tree:"ratchetPubkey"`
	Revoked            bool              `protobuf:"varint,4,opt,name=revoked,proto3" json:"revoked,omitempty" tree:"revoked"`
	Sig                []byte            `protobuf:"bytes,5,opt,name=sig,proto3" json:"sig,omitempty" tree:"sig"`
	CreatedAt          uint64            `protobuf:"varint,6,opt,name=createdAt,proto3" json:"createdAt,omitempty" tree:"createdAt"`
}

func (m *PubkeyBundle) Reset()      { *m = PubkeyBundle{} }
func (*PubkeyBundle) ProtoMessage() {}
func (*PubkeyBundle) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea3ebb9f2bccf9bd, []int{1}
}
func (m *PubkeyBundle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubkeyBundle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubkeyBundle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubkeyBundle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubkeyBundle.Merge(m, src)
}
func (m *PubkeyBundle) XXX_Size() int {
	return m.Size()
}
func (m *PubkeyBundle) XXX_DiscardUnknown() {
	xxx_messageInfo_PubkeyBundle.DiscardUnknown(m)
}

var xxx_messageInfo_PubkeyBundle proto.InternalMessageInfo

func (m *PubkeyBundle) GetRevoked() bool {
	if m != nil {
		return m.Revoked
	}
	return false
}

func (m *PubkeyBundle) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *PubkeyBundle) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

type IndividualMessage struct {
	SenderBundleID    redwood_dev_types.Hash `protobuf:"bytes,2,opt,name=senderBundleID,proto3,customtype=redwood.dev/types.Hash" json:"senderBundleID" tree:"senderBundleID"`
	RecipientBundleID redwood_dev_types.Hash `protobuf:"bytes,3,opt,name=recipientBundleID,proto3,customtype=redwood.dev/types.Hash" json:"recipientBundleID" tree:"recipientBundleID"`
	EphemeralPubkey   *X3DHPublicKey         `protobuf:"bytes,4,opt,name=ephemeralPubkey,proto3,customtype=X3DHPublicKey" json:"ephemeralPubkey,omitempty" tree:"ephemeralPubkey"`
	RatchetPubkey     *RatchetPublicKey      `protobuf:"bytes,5,opt,name=ratchetPubkey,proto3,customtype=RatchetPublicKey" json:"ratchetPubkey,omitempty" tree:"ratchetPubkey"`
	N                 uint32                 `protobuf:"varint,6,opt,name=n,proto3" json:"n,omitempty" tree:"n"`
	Pn                uint32                 `protobuf:"varint,7,opt,name=pn,proto3" json:"pn,omitempty" tree:"pn"`
	Ciphertext        []byte                 `protobuf:"bytes,8,opt,name=ciphertext,proto3" json:"ciphertext,omitempty" tree:"ciphertext"`
}

func (m *IndividualMessage) Reset()      { *m = IndividualMessage{} }
func (*IndividualMessage) ProtoMessage() {}
func (*IndividualMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea3ebb9f2bccf9bd, []int{2}
}
func (m *IndividualMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndividualMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndividualMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndividualMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndividualMessage.Merge(m, src)
}
func (m *IndividualMessage) XXX_Size() int {
	return m.Size()
}
func (m *IndividualMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_IndividualMessage.DiscardUnknown(m)
}

var xxx_messageInfo_IndividualMessage proto.InternalMessageInfo

func (m *IndividualMessage) GetN() uint32 {
	if m != nil {
		return m.N
	}
	return 0
}

func (m *IndividualMessage) GetPn() uint32 {
	if m != nil {
		return m.Pn
	}
	return 0
}

func (m *IndividualMessage) GetCiphertext() []byte {
	if m != nil {
		return m.Ciphertext
	}
	return nil
}

type GroupMessage struct {
	EncryptionKeys []IndividualMessage `protobuf:"bytes,2,rep,name=encryptionKeys,proto3" json:"encryptionKeys" tree:"encryptionKeys"`
	Ciphertext     []byte              `protobuf:"bytes,3,opt,name=ciphertext,proto3" json:"ciphertext,omitempty" tree:"ciphertext"`
	Sig            []byte              `protobuf:"bytes,4,opt,name=sig,proto3" json:"sig,omitempty" tree:"sig"`
}

func (m *GroupMessage) Reset()      { *m = GroupMessage{} }
func (*GroupMessage) ProtoMessage() {}
func (*GroupMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea3ebb9f2bccf9bd, []int{3}
}
func (m *GroupMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMessage.Merge(m, src)
}
func (m *GroupMessage) XXX_Size() int {
	return m.Size()
}
func (m *GroupMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMessage proto.InternalMessageInfo

func (m *GroupMessage) GetEncryptionKeys() []IndividualMessage {
	if m != nil {
		return m.EncryptionKeys
	}
	return nil
}

func (m *GroupMessage) GetCiphertext() []byte {
	if m != nil {
		return m.Ciphertext
	}
	return nil
}

func (m *GroupMessage) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func init() {
	proto.RegisterType((*KeyBundle)(nil), "Redwood.swarm.protohush.KeyBundle")
	proto.RegisterType((*PubkeyBundle)(nil), "Redwood.swarm.protohush.PubkeyBundle")
	proto.RegisterType((*IndividualMessage)(nil), "Redwood.swarm.protohush.IndividualMessage")
	proto.RegisterType((*GroupMessage)(nil), "Redwood.swarm.protohush.GroupMessage")
}

func init() { proto.RegisterFile("hush.proto", fileDescriptor_ea3ebb9f2bccf9bd) }

var fileDescriptor_ea3ebb9f2bccf9bd = []byte{
	// 760 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0xbf, 0x4f, 0xf3, 0x46,
	0x18, 0xc7, 0x7d, 0x49, 0xf8, 0x75, 0x24, 0x29, 0xb9, 0x02, 0x35, 0x48, 0x9c, 0xa3, 0x9b, 0x52,
	0x4a, 0x13, 0x09, 0x54, 0x55, 0x62, 0x23, 0x42, 0x2a, 0x10, 0x21, 0xa1, 0x93, 0x2a, 0x55, 0x1d,
	0x5a, 0x39, 0xf1, 0xd3, 0xd8, 0x22, 0xd8, 0xee, 0xd9, 0x0e, 0xcd, 0xd6, 0x3f, 0xa1, 0x73, 0xd7,
	0x2e, 0xfd, 0x13, 0x3a, 0x76, 0x64, 0x64, 0x44, 0x19, 0x2c, 0x62, 0x96, 0x8e, 0x28, 0x53, 0xa5,
	0x2e, 0x55, 0x7c, 0x76, 0x7e, 0xa3, 0xf6, 0x7d, 0xdf, 0xcd, 0x77, 0xcf, 0xf3, 0xfd, 0x3c, 0x77,
	0xcf, 0xf7, 0xf1, 0x61, 0x6c, 0x06, 0x9e, 0x59, 0x75, 0x85, 0xe3, 0x3b, 0xe4, 0x13, 0x0e, 0xc6,
	0xbd, 0xe3, 0x18, 0x55, 0xef, 0x5e, 0x17, 0x77, 0x72, 0x73, 0x14, 0xde, 0xff, 0xbc, 0x6d, 0xf9,
	0x66, 0xd0, 0xac, 0xb6, 0x9c, 0xbb, 0x5a, 0xdb, 0x69, 0x3b, 0xb5, 0x38, 0xd4, 0x0c, 0x7e, 0x88,
	0x57, 0xf1, 0x22, 0xfe, 0x92, 0x12, 0xf6, 0x5b, 0x16, 0x6f, 0x34, 0xa0, 0x57, 0x0f, 0x6c, 0xa3,
	0x03, 0xe4, 0x0a, 0x6f, 0x5a, 0x06, 0xd8, 0xbe, 0xe5, 0xf7, 0x1a, 0xd0, 0x53, 0x51, 0x19, 0x55,
	0xf2, 0xf5, 0x4a, 0x3f, 0xd4, 0x8a, 0xdf, 0x9c, 0x9c, 0x5f, 0xdc, 0x08, 0xab, 0xab, 0xfb, 0xd0,
	0x80, 0xde, 0x30, 0xd4, 0x88, 0x2f, 0x00, 0x4e, 0xd9, 0x54, 0x3a, 0xe3, 0xd3, 0x62, 0x72, 0x8d,
	0xf3, 0x9e, 0xd5, 0xb6, 0xc1, 0xb8, 0x11, 0x23, 0x89, 0x9a, 0x89, 0x61, 0x9f, 0x2e, 0x85, 0x7d,
	0x2c, 0x61, 0xd3, 0xf9, 0x8c, 0xcf, 0xc8, 0xc9, 0x15, 0xc6, 0x42, 0xf7, 0x5b, 0x26, 0xf8, 0x23,
	0x58, 0x36, 0x86, 0x1d, 0xf6, 0x43, 0xad, 0xc4, 0xe5, 0xee, 0x0c, 0xaf, 0x24, 0x79, 0x13, 0x01,
	0xe3, 0x53, 0x6a, 0x72, 0x84, 0xd7, 0x04, 0x74, 0x9d, 0x5b, 0x30, 0xd4, 0x5c, 0x19, 0x55, 0xd6,
	0xeb, 0x64, 0x18, 0x6a, 0xc5, 0x44, 0x23, 0x03, 0x8c, 0xa7, 0x29, 0xe4, 0x1a, 0xaf, 0xe9, 0x86,
	0x21, 0xc0, 0xf3, 0xd4, 0x95, 0xb8, 0xec, 0xc9, 0x43, 0xa8, 0x29, 0xfd, 0x50, 0xdb, 0x13, 0x89,
	0x07, 0x06, 0x74, 0x6b, 0x7e, 0xcf, 0x05, 0xaf, 0x7a, 0x26, 0x13, 0x27, 0xb8, 0x44, 0xc9, 0x78,
	0xca, 0x20, 0xc7, 0x78, 0xa3, 0x25, 0x40, 0xf7, 0xc1, 0x38, 0xf3, 0xd5, 0xd5, 0x32, 0xaa, 0xe4,
	0xea, 0xdb, 0xc3, 0x50, 0xdb, 0x92, 0xf9, 0xe3, 0x10, 0xe3, 0x93, 0x34, 0xf6, 0x6b, 0x16, 0xe7,
	0x6f, 0x82, 0xe6, 0xed, 0xd8, 0x28, 0x8e, 0x8b, 0x69, 0xaf, 0xe5, 0x7e, 0xe2, 0xd5, 0xa8, 0x23,
	0x85, 0xb8, 0xbd, 0x41, 0xb3, 0x63, 0xb5, 0x64, 0x37, 0x76, 0x66, 0xad, 0x92, 0x02, 0xc6, 0xe7,
	0x08, 0xe4, 0x3b, 0x4c, 0xa6, 0x3b, 0x9e, 0x70, 0xa5, 0x6d, 0xd5, 0x65, 0xdc, 0xbd, 0x45, 0xd7,
	0x52, 0xf6, 0x12, 0x12, 0xe1, 0xb8, 0x90, 0x78, 0x90, 0xa0, 0xa5, 0x89, 0x47, 0xfd, 0x50, 0xdb,
	0xe2, 0xe3, 0xc0, 0x98, 0xbe, 0x3d, 0xe3, 0x61, 0x0a, 0x9e, 0x45, 0xbc, 0xa3, 0x93, 0x65, 0x9c,
	0xf5, 0xac, 0x76, 0xe2, 0x62, 0x71, 0x18, 0x6a, 0x78, 0x7c, 0x03, 0xc6, 0x47, 0xa1, 0xf7, 0x32,
	0xe7, 0x9f, 0x2c, 0x2e, 0x5d, 0xda, 0x86, 0xd5, 0xb5, 0x8c, 0x40, 0xef, 0x5c, 0x83, 0xe7, 0xe9,
	0x6d, 0x20, 0xdf, 0xe3, 0xa2, 0x07, 0xb6, 0x01, 0x42, 0x3a, 0x76, 0x79, 0x9e, 0x74, 0xf2, 0xcb,
	0x64, 0x78, 0x76, 0x17, 0x87, 0xe7, 0x42, 0xf7, 0xcc, 0x89, 0x5d, 0xb3, 0x6a, 0xc6, 0xe7, 0x70,
	0xc4, 0xc4, 0x25, 0x01, 0x2d, 0xcb, 0xb5, 0xc0, 0xf6, 0xc7, 0x35, 0x64, 0x4b, 0x4f, 0xff, 0xb3,
	0x86, 0x9a, 0xb6, 0x68, 0x0e, 0xc0, 0xf8, 0x22, 0x94, 0x7c, 0x8d, 0x3f, 0x02, 0xd7, 0x84, 0x3b,
	0x10, 0x7a, 0x27, 0xb1, 0x2e, 0x17, 0xd7, 0xf9, 0x6c, 0xd9, 0x54, 0xec, 0x4a, 0xf4, 0x9c, 0x82,
	0xf1, 0x79, 0xc6, 0xe2, 0x3c, 0xac, 0x7c, 0xf8, 0x3c, 0xec, 0x63, 0x64, 0xc7, 0xbe, 0x15, 0xea,
	0xf9, 0x61, 0xa8, 0xad, 0x4b, 0x8d, 0xcd, 0x38, 0xb2, 0xc9, 0x01, 0xce, 0xb8, 0xb6, 0xba, 0x16,
	0x07, 0x0b, 0xc3, 0x50, 0xdb, 0x90, 0x41, 0xd7, 0x66, 0x3c, 0xe3, 0xda, 0xe4, 0x0b, 0x8c, 0x5b,
	0x96, 0x6b, 0x82, 0xf0, 0xe1, 0x27, 0x5f, 0x5d, 0x8f, 0xcf, 0xb2, 0x33, 0x79, 0x4b, 0x26, 0x31,
	0xc6, 0xa7, 0x12, 0x59, 0x1f, 0xe1, 0xfc, 0x57, 0xc2, 0x09, 0xdc, 0xd4, 0xf8, 0x1f, 0x71, 0x11,
	0xec, 0x96, 0xe8, 0xb9, 0xbe, 0xe5, 0xd8, 0x0d, 0xe8, 0x79, 0x6a, 0xa6, 0x9c, 0xad, 0x6c, 0x1e,
	0x1f, 0x56, 0xdf, 0x78, 0xb2, 0xab, 0x0b, 0xc3, 0x53, 0x3f, 0x18, 0x19, 0x38, 0x19, 0x85, 0x59,
	0x1e, 0xe3, 0x73, 0x05, 0xe6, 0x8e, 0x9e, 0xfd, 0x9f, 0x47, 0x4f, 0x7f, 0x87, 0xdc, 0x9b, 0xbf,
	0x43, 0xdd, 0x78, 0x1c, 0x50, 0xe5, 0x69, 0x40, 0x95, 0xe7, 0x01, 0x55, 0x5e, 0x07, 0x14, 0xfd,
	0x3d, 0xa0, 0xe8, 0xe7, 0x88, 0xa2, 0xdf, 0x23, 0xaa, 0xfc, 0x11, 0x51, 0xf4, 0x67, 0x44, 0xd1,
	0x43, 0x44, 0xd1, 0x63, 0x44, 0xd1, 0x73, 0x44, 0xd1, 0x5f, 0x11, 0x55, 0x5e, 0x23, 0x8a, 0x7e,
	0x79, 0xa1, 0xca, 0xe3, 0x0b, 0x55, 0x9e, 0x5e, 0xa8, 0xf2, 0x2d, 0x9d, 0x1e, 0xc3, 0xf8, 0xf2,
	0xb5, 0xf1, 0xe5, 0x6b, 0x6e, 0xb3, 0xb9, 0x1a, 0xaf, 0x4e, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff,
	0xb3, 0xe2, 0xba, 0x52, 0xe0, 0x06, 0x00, 0x00,
}

func (this *KeyBundle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.KeyBundle{")
	s = append(s, "IdentityKey: "+fmt.Sprintf("%#v", this.IdentityKey)+",\n")
	s = append(s, "SignedPreKey: "+fmt.Sprintf("%#v", this.SignedPreKey)+",\n")
	s = append(s, "RatchetKey: "+fmt.Sprintf("%#v", this.RatchetKey)+",\n")
	s = append(s, "Revoked: "+fmt.Sprintf("%#v", this.Revoked)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PubkeyBundle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.PubkeyBundle{")
	s = append(s, "IdentityPubkey: "+fmt.Sprintf("%#v", this.IdentityPubkey)+",\n")
	s = append(s, "SignedPreKeyPubkey: "+fmt.Sprintf("%#v", this.SignedPreKeyPubkey)+",\n")
	s = append(s, "RatchetPubkey: "+fmt.Sprintf("%#v", this.RatchetPubkey)+",\n")
	s = append(s, "Revoked: "+fmt.Sprintf("%#v", this.Revoked)+",\n")
	s = append(s, "Sig: "+fmt.Sprintf("%#v", this.Sig)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IndividualMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.IndividualMessage{")
	s = append(s, "SenderBundleID: "+fmt.Sprintf("%#v", this.SenderBundleID)+",\n")
	s = append(s, "RecipientBundleID: "+fmt.Sprintf("%#v", this.RecipientBundleID)+",\n")
	s = append(s, "EphemeralPubkey: "+fmt.Sprintf("%#v", this.EphemeralPubkey)+",\n")
	s = append(s, "RatchetPubkey: "+fmt.Sprintf("%#v", this.RatchetPubkey)+",\n")
	s = append(s, "N: "+fmt.Sprintf("%#v", this.N)+",\n")
	s = append(s, "Pn: "+fmt.Sprintf("%#v", this.Pn)+",\n")
	s = append(s, "Ciphertext: "+fmt.Sprintf("%#v", this.Ciphertext)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GroupMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.GroupMessage{")
	if this.EncryptionKeys != nil {
		vs := make([]IndividualMessage, len(this.EncryptionKeys))
		for i := range vs {
			vs[i] = this.EncryptionKeys[i]
		}
		s = append(s, "EncryptionKeys: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "Ciphertext: "+fmt.Sprintf("%#v", this.Ciphertext)+",\n")
	s = append(s, "Sig: "+fmt.Sprintf("%#v", this.Sig)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringHush(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *KeyBundle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyBundle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyBundle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != 0 {
		i = encodeVarintHush(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.Address.Size()
		i -= size
		if _, err := m.Address.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintHush(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Revoked {
		i--
		if m.Revoked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.RatchetKey != nil {
		{
			size := m.RatchetKey.Size()
			i -= size
			if _, err := m.RatchetKey.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintHush(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SignedPreKey != nil {
		{
			size := m.SignedPreKey.Size()
			i -= size
			if _, err := m.SignedPreKey.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintHush(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.IdentityKey != nil {
		{
			size := m.IdentityKey.Size()
			i -= size
			if _, err := m.IdentityKey.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintHush(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PubkeyBundle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubkeyBundle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubkeyBundle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != 0 {
		i = encodeVarintHush(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Sig) > 0 {
		i -= len(m.Sig)
		copy(dAtA[i:], m.Sig)
		i = encodeVarintHush(dAtA, i, uint64(len(m.Sig)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Revoked {
		i--
		if m.Revoked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.RatchetPubkey != nil {
		{
			size := m.RatchetPubkey.Size()
			i -= size
			if _, err := m.RatchetPubkey.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintHush(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SignedPreKeyPubkey != nil {
		{
			size := m.SignedPreKeyPubkey.Size()
			i -= size
			if _, err := m.SignedPreKeyPubkey.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintHush(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.IdentityPubkey != nil {
		{
			size := m.IdentityPubkey.Size()
			i -= size
			if _, err := m.IdentityPubkey.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintHush(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IndividualMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndividualMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndividualMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ciphertext) > 0 {
		i -= len(m.Ciphertext)
		copy(dAtA[i:], m.Ciphertext)
		i = encodeVarintHush(dAtA, i, uint64(len(m.Ciphertext)))
		i--
		dAtA[i] = 0x42
	}
	if m.Pn != 0 {
		i = encodeVarintHush(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x38
	}
	if m.N != 0 {
		i = encodeVarintHush(dAtA, i, uint64(m.N))
		i--
		dAtA[i] = 0x30
	}
	if m.RatchetPubkey != nil {
		{
			size := m.RatchetPubkey.Size()
			i -= size
			if _, err := m.RatchetPubkey.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintHush(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.EphemeralPubkey != nil {
		{
			size := m.EphemeralPubkey.Size()
			i -= size
			if _, err := m.EphemeralPubkey.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintHush(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.RecipientBundleID.Size()
		i -= size
		if _, err := m.RecipientBundleID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintHush(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.SenderBundleID.Size()
		i -= size
		if _, err := m.SenderBundleID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintHush(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}

func (m *GroupMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sig) > 0 {
		i -= len(m.Sig)
		copy(dAtA[i:], m.Sig)
		i = encodeVarintHush(dAtA, i, uint64(len(m.Sig)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Ciphertext) > 0 {
		i -= len(m.Ciphertext)
		copy(dAtA[i:], m.Ciphertext)
		i = encodeVarintHush(dAtA, i, uint64(len(m.Ciphertext)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EncryptionKeys) > 0 {
		for iNdEx := len(m.EncryptionKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EncryptionKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHush(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintHush(dAtA []byte, offset int, v uint64) int {
	offset -= sovHush(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedKeyBundle(r randyHush, easy bool) *KeyBundle {
	this := &KeyBundle{}
	this.IdentityKey = NewPopulatedX3DHPrivateKey(r)
	this.SignedPreKey = NewPopulatedX3DHPrivateKey(r)
	this.RatchetKey = NewPopulatedRatchetPrivateKey(r)
	this.Revoked = bool(bool(r.Intn(2) == 0))
	v1 := redwood_dev_types.NewPopulatedAddress(r)
	this.Address = *v1
	this.CreatedAt = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPubkeyBundle(r randyHush, easy bool) *PubkeyBundle {
	this := &PubkeyBundle{}
	this.IdentityPubkey = NewPopulatedX3DHPublicKey(r)
	this.SignedPreKeyPubkey = NewPopulatedX3DHPublicKey(r)
	this.RatchetPubkey = NewPopulatedRatchetPublicKey(r)
	this.Revoked = bool(bool(r.Intn(2) == 0))
	v2 := r.Intn(100)
	this.Sig = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.Sig[i] = byte(r.Intn(256))
	}
	this.CreatedAt = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedIndividualMessage(r randyHush, easy bool) *IndividualMessage {
	this := &IndividualMessage{}
	v3 := redwood_dev_types.NewPopulatedHash(r)
	this.SenderBundleID = *v3
	v4 := redwood_dev_types.NewPopulatedHash(r)
	this.RecipientBundleID = *v4
	this.EphemeralPubkey = NewPopulatedX3DHPublicKey(r)
	this.RatchetPubkey = NewPopulatedRatchetPublicKey(r)
	this.N = uint32(r.Uint32())
	this.Pn = uint32(r.Uint32())
	v5 := r.Intn(100)
	this.Ciphertext = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.Ciphertext[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGroupMessage(r randyHush, easy bool) *GroupMessage {
	this := &GroupMessage{}
	if r.Intn(5) != 0 {
		v6 := r.Intn(5)
		this.EncryptionKeys = make([]IndividualMessage, v6)
		for i := 0; i < v6; i++ {
			v7 := NewPopulatedIndividualMessage(r, easy)
			this.EncryptionKeys[i] = *v7
		}
	}
	v8 := r.Intn(100)
	this.Ciphertext = make([]byte, v8)
	for i := 0; i < v8; i++ {
		this.Ciphertext[i] = byte(r.Intn(256))
	}
	v9 := r.Intn(100)
	this.Sig = make([]byte, v9)
	for i := 0; i < v9; i++ {
		this.Sig[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyHush interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneHush(r randyHush) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringHush(r randyHush) string {
	v10 := r.Intn(100)
	tmps := make([]rune, v10)
	for i := 0; i < v10; i++ {
		tmps[i] = randUTF8RuneHush(r)
	}
	return string(tmps)
}
func randUnrecognizedHush(r randyHush, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldHush(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldHush(dAtA []byte, r randyHush, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateHush(dAtA, uint64(key))
		v11 := r.Int63()
		if r.Intn(2) == 0 {
			v11 *= -1
		}
		dAtA = encodeVarintPopulateHush(dAtA, uint64(v11))
	case 1:
		dAtA = encodeVarintPopulateHush(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateHush(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateHush(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateHush(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateHush(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *KeyBundle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdentityKey != nil {
		l = m.IdentityKey.Size()
		n += 1 + l + sovHush(uint64(l))
	}
	if m.SignedPreKey != nil {
		l = m.SignedPreKey.Size()
		n += 1 + l + sovHush(uint64(l))
	}
	if m.RatchetKey != nil {
		l = m.RatchetKey.Size()
		n += 1 + l + sovHush(uint64(l))
	}
	if m.Revoked {
		n += 2
	}
	l = m.Address.Size()
	n += 1 + l + sovHush(uint64(l))
	if m.CreatedAt != 0 {
		n += 1 + sovHush(uint64(m.CreatedAt))
	}
	return n
}

func (m *PubkeyBundle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdentityPubkey != nil {
		l = m.IdentityPubkey.Size()
		n += 1 + l + sovHush(uint64(l))
	}
	if m.SignedPreKeyPubkey != nil {
		l = m.SignedPreKeyPubkey.Size()
		n += 1 + l + sovHush(uint64(l))
	}
	if m.RatchetPubkey != nil {
		l = m.RatchetPubkey.Size()
		n += 1 + l + sovHush(uint64(l))
	}
	if m.Revoked {
		n += 2
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovHush(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovHush(uint64(m.CreatedAt))
	}
	return n
}

func (m *IndividualMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SenderBundleID.Size()
	n += 1 + l + sovHush(uint64(l))
	l = m.RecipientBundleID.Size()
	n += 1 + l + sovHush(uint64(l))
	if m.EphemeralPubkey != nil {
		l = m.EphemeralPubkey.Size()
		n += 1 + l + sovHush(uint64(l))
	}
	if m.RatchetPubkey != nil {
		l = m.RatchetPubkey.Size()
		n += 1 + l + sovHush(uint64(l))
	}
	if m.N != 0 {
		n += 1 + sovHush(uint64(m.N))
	}
	if m.Pn != 0 {
		n += 1 + sovHush(uint64(m.Pn))
	}
	l = len(m.Ciphertext)
	if l > 0 {
		n += 1 + l + sovHush(uint64(l))
	}
	return n
}

func (m *GroupMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EncryptionKeys) > 0 {
		for _, e := range m.EncryptionKeys {
			l = e.Size()
			n += 1 + l + sovHush(uint64(l))
		}
	}
	l = len(m.Ciphertext)
	if l > 0 {
		n += 1 + l + sovHush(uint64(l))
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovHush(uint64(l))
	}
	return n
}

func sovHush(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHush(x uint64) (n int) {
	return sovHush(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *KeyBundle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KeyBundle{`,
		`IdentityKey:` + fmt.Sprintf("%v", this.IdentityKey) + `,`,
		`SignedPreKey:` + fmt.Sprintf("%v", this.SignedPreKey) + `,`,
		`RatchetKey:` + fmt.Sprintf("%v", this.RatchetKey) + `,`,
		`Revoked:` + fmt.Sprintf("%v", this.Revoked) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`CreatedAt:` + fmt.Sprintf("%v", this.CreatedAt) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PubkeyBundle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PubkeyBundle{`,
		`IdentityPubkey:` + fmt.Sprintf("%v", this.IdentityPubkey) + `,`,
		`SignedPreKeyPubkey:` + fmt.Sprintf("%v", this.SignedPreKeyPubkey) + `,`,
		`RatchetPubkey:` + fmt.Sprintf("%v", this.RatchetPubkey) + `,`,
		`Revoked:` + fmt.Sprintf("%v", this.Revoked) + `,`,
		`Sig:` + fmt.Sprintf("%v", this.Sig) + `,`,
		`CreatedAt:` + fmt.Sprintf("%v", this.CreatedAt) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IndividualMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IndividualMessage{`,
		`SenderBundleID:` + fmt.Sprintf("%v", this.SenderBundleID) + `,`,
		`RecipientBundleID:` + fmt.Sprintf("%v", this.RecipientBundleID) + `,`,
		`EphemeralPubkey:` + fmt.Sprintf("%v", this.EphemeralPubkey) + `,`,
		`RatchetPubkey:` + fmt.Sprintf("%v", this.RatchetPubkey) + `,`,
		`N:` + fmt.Sprintf("%v", this.N) + `,`,
		`Pn:` + fmt.Sprintf("%v", this.Pn) + `,`,
		`Ciphertext:` + fmt.Sprintf("%v", this.Ciphertext) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GroupMessage) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEncryptionKeys := "[]IndividualMessage{"
	for _, f := range this.EncryptionKeys {
		repeatedStringForEncryptionKeys += strings.Replace(strings.Replace(f.String(), "IndividualMessage", "IndividualMessage", 1), `&`, ``, 1) + ","
	}
	repeatedStringForEncryptionKeys += "}"
	s := strings.Join([]string{`&GroupMessage{`,
		`EncryptionKeys:` + repeatedStringForEncryptionKeys + `,`,
		`Ciphertext:` + fmt.Sprintf("%v", this.Ciphertext) + `,`,
		`Sig:` + fmt.Sprintf("%v", this.Sig) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringHush(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *KeyBundle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyBundle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyBundle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHush
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v X3DHPrivateKey
			m.IdentityKey = &v
			if err := m.IdentityKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedPreKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHush
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v X3DHPrivateKey
			m.SignedPreKey = &v
			if err := m.SignedPreKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatchetKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHush
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v RatchetPrivateKey
			m.RatchetKey = &v
			if err := m.RatchetKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revoked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Revoked = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHush
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubkeyBundle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubkeyBundle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubkeyBundle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityPubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHush
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v X3DHPublicKey
			m.IdentityPubkey = &v
			if err := m.IdentityPubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedPreKeyPubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHush
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v X3DHPublicKey
			m.SignedPreKeyPubkey = &v
			if err := m.SignedPreKeyPubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatchetPubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHush
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v RatchetPublicKey
			m.RatchetPubkey = &v
			if err := m.RatchetPubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revoked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Revoked = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHush
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndividualMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndividualMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndividualMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderBundleID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHush
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SenderBundleID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientBundleID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHush
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RecipientBundleID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EphemeralPubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHush
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v X3DHPublicKey
			m.EphemeralPubkey = &v
			if err := m.EphemeralPubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatchetPubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHush
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v RatchetPublicKey
			m.RatchetPubkey = &v
			if err := m.RatchetPubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			m.N = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.N |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ciphertext", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHush
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ciphertext = append(m.Ciphertext[:0], dAtA[iNdEx:postIndex]...)
			if m.Ciphertext == nil {
				m.Ciphertext = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptionKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHush
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptionKeys = append(m.EncryptionKeys, IndividualMessage{})
			if err := m.EncryptionKeys[len(m.EncryptionKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ciphertext", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHush
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ciphertext = append(m.Ciphertext[:0], dAtA[iNdEx:postIndex]...)
			if m.Ciphertext == nil {
				m.Ciphertext = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHush
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHush(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHush
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHush
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHush
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHush
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHush
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHush
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHush        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHush          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHush = fmt.Errorf("proto: unexpected end of group")
)
