// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	libp2p "redwood.dev/swarm/libp2p"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// AddStaticRelay provides a mock function with given fields: relayAddr
func (_m *Store) AddStaticRelay(relayAddr string) error {
	ret := _m.Called(relayAddr)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(relayAddr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DebugPrint provides a mock function with given fields:
func (_m *Store) DebugPrint() {
	_m.Called()
}

// RemoveStaticRelay provides a mock function with given fields: relayAddr
func (_m *Store) RemoveStaticRelay(relayAddr string) error {
	ret := _m.Called(relayAddr)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(relayAddr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StaticRelays provides a mock function with given fields:
func (_m *Store) StaticRelays() libp2p.PeerSet {
	ret := _m.Called()

	var r0 libp2p.PeerSet
	if rf, ok := ret.Get(0).(func() libp2p.PeerSet); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(libp2p.PeerSet)
	}

	return r0
}

type mockConstructorTestingTNewStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStore(t mockConstructorTestingTNewStore) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
