// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: libp2p.proto

package pb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	pb "redwood.dev/blob/pb"
	redwood_dev_crypto "redwood.dev/crypto"
	redwood_dev_state "redwood.dev/state"
	redwood_dev_swarm "redwood.dev/swarm"
	pb1 "redwood.dev/swarm/protohush/pb"
	pb2 "redwood.dev/tree/pb"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AuthMessage struct {
	// Types that are valid to be assigned to Payload:
	//	*AuthMessage_ChallengeRequest_
	//	*AuthMessage_Challenge_
	//	*AuthMessage_Signatures_
	//	*AuthMessage_Ucan_
	Payload isAuthMessage_Payload `protobuf_oneof:"payload"`
}

func (m *AuthMessage) Reset()      { *m = AuthMessage{} }
func (*AuthMessage) ProtoMessage() {}
func (*AuthMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{0}
}
func (m *AuthMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthMessage.Merge(m, src)
}
func (m *AuthMessage) XXX_Size() int {
	return m.Size()
}
func (m *AuthMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthMessage.DiscardUnknown(m)
}

var xxx_messageInfo_AuthMessage proto.InternalMessageInfo

type isAuthMessage_Payload interface {
	isAuthMessage_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
}

type AuthMessage_ChallengeRequest_ struct {
	ChallengeRequest *AuthMessage_ChallengeRequest `protobuf:"bytes,1,opt,name=challengeRequest,proto3,oneof" json:"challengeRequest,omitempty"`
}
type AuthMessage_Challenge_ struct {
	Challenge *AuthMessage_Challenge `protobuf:"bytes,2,opt,name=challenge,proto3,oneof" json:"challenge,omitempty"`
}
type AuthMessage_Signatures_ struct {
	Signatures *AuthMessage_Signatures `protobuf:"bytes,3,opt,name=signatures,proto3,oneof" json:"signatures,omitempty"`
}
type AuthMessage_Ucan_ struct {
	Ucan *AuthMessage_Ucan `protobuf:"bytes,4,opt,name=ucan,proto3,oneof" json:"ucan,omitempty"`
}

func (*AuthMessage_ChallengeRequest_) isAuthMessage_Payload() {}
func (*AuthMessage_Challenge_) isAuthMessage_Payload()        {}
func (*AuthMessage_Signatures_) isAuthMessage_Payload()       {}
func (*AuthMessage_Ucan_) isAuthMessage_Payload()             {}

func (m *AuthMessage) GetPayload() isAuthMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *AuthMessage) GetChallengeRequest() *AuthMessage_ChallengeRequest {
	if x, ok := m.GetPayload().(*AuthMessage_ChallengeRequest_); ok {
		return x.ChallengeRequest
	}
	return nil
}

func (m *AuthMessage) GetChallenge() *AuthMessage_Challenge {
	if x, ok := m.GetPayload().(*AuthMessage_Challenge_); ok {
		return x.Challenge
	}
	return nil
}

func (m *AuthMessage) GetSignatures() *AuthMessage_Signatures {
	if x, ok := m.GetPayload().(*AuthMessage_Signatures_); ok {
		return x.Signatures
	}
	return nil
}

func (m *AuthMessage) GetUcan() *AuthMessage_Ucan {
	if x, ok := m.GetPayload().(*AuthMessage_Ucan_); ok {
		return x.Ucan
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AuthMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AuthMessage_ChallengeRequest_)(nil),
		(*AuthMessage_Challenge_)(nil),
		(*AuthMessage_Signatures_)(nil),
		(*AuthMessage_Ucan_)(nil),
	}
}

type AuthMessage_ChallengeRequest struct {
}

func (m *AuthMessage_ChallengeRequest) Reset()      { *m = AuthMessage_ChallengeRequest{} }
func (*AuthMessage_ChallengeRequest) ProtoMessage() {}
func (*AuthMessage_ChallengeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{0, 0}
}
func (m *AuthMessage_ChallengeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthMessage_ChallengeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthMessage_ChallengeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthMessage_ChallengeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthMessage_ChallengeRequest.Merge(m, src)
}
func (m *AuthMessage_ChallengeRequest) XXX_Size() int {
	return m.Size()
}
func (m *AuthMessage_ChallengeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthMessage_ChallengeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthMessage_ChallengeRequest proto.InternalMessageInfo

type AuthMessage_Challenge struct {
	Challenge redwood_dev_crypto.ChallengeMsg `protobuf:"bytes,1,opt,name=challenge,proto3,customtype=redwood.dev/crypto.ChallengeMsg" json:"challenge"`
}

func (m *AuthMessage_Challenge) Reset()      { *m = AuthMessage_Challenge{} }
func (*AuthMessage_Challenge) ProtoMessage() {}
func (*AuthMessage_Challenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{0, 1}
}
func (m *AuthMessage_Challenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthMessage_Challenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthMessage_Challenge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthMessage_Challenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthMessage_Challenge.Merge(m, src)
}
func (m *AuthMessage_Challenge) XXX_Size() int {
	return m.Size()
}
func (m *AuthMessage_Challenge) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthMessage_Challenge.DiscardUnknown(m)
}

var xxx_messageInfo_AuthMessage_Challenge proto.InternalMessageInfo

type AuthMessage_Signatures struct {
	Challenges     []redwood_dev_crypto.ChallengeMsg  `protobuf:"bytes,1,rep,name=challenges,proto3,customtype=redwood.dev/crypto.ChallengeMsg" json:"challenges"`
	Signatures     []redwood_dev_crypto.Signature     `protobuf:"bytes,2,rep,name=signatures,proto3,customtype=redwood.dev/crypto.Signature" json:"signatures"`
	AsymEncPubkeys []redwood_dev_crypto.AsymEncPubkey `protobuf:"bytes,3,rep,name=asymEncPubkeys,proto3,customtype=redwood.dev/crypto.AsymEncPubkey" json:"asymEncPubkeys,omitempty"`
}

func (m *AuthMessage_Signatures) Reset()      { *m = AuthMessage_Signatures{} }
func (*AuthMessage_Signatures) ProtoMessage() {}
func (*AuthMessage_Signatures) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{0, 2}
}
func (m *AuthMessage_Signatures) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthMessage_Signatures) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthMessage_Signatures.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthMessage_Signatures) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthMessage_Signatures.Merge(m, src)
}
func (m *AuthMessage_Signatures) XXX_Size() int {
	return m.Size()
}
func (m *AuthMessage_Signatures) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthMessage_Signatures.DiscardUnknown(m)
}

var xxx_messageInfo_AuthMessage_Signatures proto.InternalMessageInfo

type AuthMessage_Ucan struct {
	Ucan string `protobuf:"bytes,1,opt,name=ucan,proto3" json:"ucan,omitempty"`
}

func (m *AuthMessage_Ucan) Reset()      { *m = AuthMessage_Ucan{} }
func (*AuthMessage_Ucan) ProtoMessage() {}
func (*AuthMessage_Ucan) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{0, 3}
}
func (m *AuthMessage_Ucan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthMessage_Ucan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthMessage_Ucan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthMessage_Ucan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthMessage_Ucan.Merge(m, src)
}
func (m *AuthMessage_Ucan) XXX_Size() int {
	return m.Size()
}
func (m *AuthMessage_Ucan) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthMessage_Ucan.DiscardUnknown(m)
}

var xxx_messageInfo_AuthMessage_Ucan proto.InternalMessageInfo

func (m *AuthMessage_Ucan) GetUcan() string {
	if m != nil {
		return m.Ucan
	}
	return ""
}

type BlobMessage struct {
	// Types that are valid to be assigned to Payload:
	//	*BlobMessage_FetchManifest_
	//	*BlobMessage_SendManifest_
	//	*BlobMessage_FetchChunk_
	//	*BlobMessage_SendChunk_
	Payload isBlobMessage_Payload `protobuf_oneof:"payload"`
}

func (m *BlobMessage) Reset()      { *m = BlobMessage{} }
func (*BlobMessage) ProtoMessage() {}
func (*BlobMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{1}
}
func (m *BlobMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlobMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlobMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlobMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlobMessage.Merge(m, src)
}
func (m *BlobMessage) XXX_Size() int {
	return m.Size()
}
func (m *BlobMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BlobMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BlobMessage proto.InternalMessageInfo

type isBlobMessage_Payload interface {
	isBlobMessage_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
}

type BlobMessage_FetchManifest_ struct {
	FetchManifest *BlobMessage_FetchManifest `protobuf:"bytes,1,opt,name=fetchManifest,proto3,oneof" json:"fetchManifest,omitempty"`
}
type BlobMessage_SendManifest_ struct {
	SendManifest *BlobMessage_SendManifest `protobuf:"bytes,2,opt,name=sendManifest,proto3,oneof" json:"sendManifest,omitempty"`
}
type BlobMessage_FetchChunk_ struct {
	FetchChunk *BlobMessage_FetchChunk `protobuf:"bytes,3,opt,name=fetchChunk,proto3,oneof" json:"fetchChunk,omitempty"`
}
type BlobMessage_SendChunk_ struct {
	SendChunk *BlobMessage_SendChunk `protobuf:"bytes,4,opt,name=sendChunk,proto3,oneof" json:"sendChunk,omitempty"`
}

func (*BlobMessage_FetchManifest_) isBlobMessage_Payload() {}
func (*BlobMessage_SendManifest_) isBlobMessage_Payload()  {}
func (*BlobMessage_FetchChunk_) isBlobMessage_Payload()    {}
func (*BlobMessage_SendChunk_) isBlobMessage_Payload()     {}

func (m *BlobMessage) GetPayload() isBlobMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *BlobMessage) GetFetchManifest() *BlobMessage_FetchManifest {
	if x, ok := m.GetPayload().(*BlobMessage_FetchManifest_); ok {
		return x.FetchManifest
	}
	return nil
}

func (m *BlobMessage) GetSendManifest() *BlobMessage_SendManifest {
	if x, ok := m.GetPayload().(*BlobMessage_SendManifest_); ok {
		return x.SendManifest
	}
	return nil
}

func (m *BlobMessage) GetFetchChunk() *BlobMessage_FetchChunk {
	if x, ok := m.GetPayload().(*BlobMessage_FetchChunk_); ok {
		return x.FetchChunk
	}
	return nil
}

func (m *BlobMessage) GetSendChunk() *BlobMessage_SendChunk {
	if x, ok := m.GetPayload().(*BlobMessage_SendChunk_); ok {
		return x.SendChunk
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BlobMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BlobMessage_FetchManifest_)(nil),
		(*BlobMessage_SendManifest_)(nil),
		(*BlobMessage_FetchChunk_)(nil),
		(*BlobMessage_SendChunk_)(nil),
	}
}

type BlobMessage_FetchManifest struct {
	BlobID pb.ID `protobuf:"bytes,1,opt,name=blobID,proto3" json:"blobID"`
}

func (m *BlobMessage_FetchManifest) Reset()      { *m = BlobMessage_FetchManifest{} }
func (*BlobMessage_FetchManifest) ProtoMessage() {}
func (*BlobMessage_FetchManifest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{1, 0}
}
func (m *BlobMessage_FetchManifest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlobMessage_FetchManifest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlobMessage_FetchManifest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlobMessage_FetchManifest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlobMessage_FetchManifest.Merge(m, src)
}
func (m *BlobMessage_FetchManifest) XXX_Size() int {
	return m.Size()
}
func (m *BlobMessage_FetchManifest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlobMessage_FetchManifest.DiscardUnknown(m)
}

var xxx_messageInfo_BlobMessage_FetchManifest proto.InternalMessageInfo

func (m *BlobMessage_FetchManifest) GetBlobID() pb.ID {
	if m != nil {
		return m.BlobID
	}
	return pb.ID{}
}

type BlobMessage_SendManifest struct {
	Manifest pb.Manifest `protobuf:"bytes,1,opt,name=manifest,proto3" json:"manifest"`
	Exists   bool        `protobuf:"varint,2,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (m *BlobMessage_SendManifest) Reset()      { *m = BlobMessage_SendManifest{} }
func (*BlobMessage_SendManifest) ProtoMessage() {}
func (*BlobMessage_SendManifest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{1, 1}
}
func (m *BlobMessage_SendManifest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlobMessage_SendManifest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlobMessage_SendManifest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlobMessage_SendManifest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlobMessage_SendManifest.Merge(m, src)
}
func (m *BlobMessage_SendManifest) XXX_Size() int {
	return m.Size()
}
func (m *BlobMessage_SendManifest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlobMessage_SendManifest.DiscardUnknown(m)
}

var xxx_messageInfo_BlobMessage_SendManifest proto.InternalMessageInfo

func (m *BlobMessage_SendManifest) GetManifest() pb.Manifest {
	if m != nil {
		return m.Manifest
	}
	return pb.Manifest{}
}

func (m *BlobMessage_SendManifest) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

type BlobMessage_FetchChunk struct {
	SHA3 []byte `protobuf:"bytes,1,opt,name=sha3,proto3" json:"sha3,omitempty"`
}

func (m *BlobMessage_FetchChunk) Reset()      { *m = BlobMessage_FetchChunk{} }
func (*BlobMessage_FetchChunk) ProtoMessage() {}
func (*BlobMessage_FetchChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{1, 2}
}
func (m *BlobMessage_FetchChunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlobMessage_FetchChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlobMessage_FetchChunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlobMessage_FetchChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlobMessage_FetchChunk.Merge(m, src)
}
func (m *BlobMessage_FetchChunk) XXX_Size() int {
	return m.Size()
}
func (m *BlobMessage_FetchChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_BlobMessage_FetchChunk.DiscardUnknown(m)
}

var xxx_messageInfo_BlobMessage_FetchChunk proto.InternalMessageInfo

func (m *BlobMessage_FetchChunk) GetSHA3() []byte {
	if m != nil {
		return m.SHA3
	}
	return nil
}

type BlobMessage_SendChunk struct {
	Chunk  []byte `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	Exists bool   `protobuf:"varint,2,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (m *BlobMessage_SendChunk) Reset()      { *m = BlobMessage_SendChunk{} }
func (*BlobMessage_SendChunk) ProtoMessage() {}
func (*BlobMessage_SendChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{1, 3}
}
func (m *BlobMessage_SendChunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlobMessage_SendChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlobMessage_SendChunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlobMessage_SendChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlobMessage_SendChunk.Merge(m, src)
}
func (m *BlobMessage_SendChunk) XXX_Size() int {
	return m.Size()
}
func (m *BlobMessage_SendChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_BlobMessage_SendChunk.DiscardUnknown(m)
}

var xxx_messageInfo_BlobMessage_SendChunk proto.InternalMessageInfo

func (m *BlobMessage_SendChunk) GetChunk() []byte {
	if m != nil {
		return m.Chunk
	}
	return nil
}

func (m *BlobMessage_SendChunk) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

type HushMessage struct {
	// Types that are valid to be assigned to Payload:
	//	*HushMessage_PubkeyBundles_
	Payload isHushMessage_Payload `protobuf_oneof:"payload"`
}

func (m *HushMessage) Reset()      { *m = HushMessage{} }
func (*HushMessage) ProtoMessage() {}
func (*HushMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{2}
}
func (m *HushMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HushMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HushMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HushMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HushMessage.Merge(m, src)
}
func (m *HushMessage) XXX_Size() int {
	return m.Size()
}
func (m *HushMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_HushMessage.DiscardUnknown(m)
}

var xxx_messageInfo_HushMessage proto.InternalMessageInfo

type isHushMessage_Payload interface {
	isHushMessage_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
}

type HushMessage_PubkeyBundles_ struct {
	PubkeyBundles *HushMessage_PubkeyBundles `protobuf:"bytes,1,opt,name=pubkeyBundles,proto3,oneof" json:"pubkeyBundles,omitempty"`
}

func (*HushMessage_PubkeyBundles_) isHushMessage_Payload() {}

func (m *HushMessage) GetPayload() isHushMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *HushMessage) GetPubkeyBundles() *HushMessage_PubkeyBundles {
	if x, ok := m.GetPayload().(*HushMessage_PubkeyBundles_); ok {
		return x.PubkeyBundles
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HushMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HushMessage_PubkeyBundles_)(nil),
	}
}

type HushMessage_PubkeyBundles struct {
	Bundles []pb1.PubkeyBundle `protobuf:"bytes,1,rep,name=bundles,proto3" json:"bundles"`
}

func (m *HushMessage_PubkeyBundles) Reset()      { *m = HushMessage_PubkeyBundles{} }
func (*HushMessage_PubkeyBundles) ProtoMessage() {}
func (*HushMessage_PubkeyBundles) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{2, 0}
}
func (m *HushMessage_PubkeyBundles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HushMessage_PubkeyBundles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HushMessage_PubkeyBundles.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HushMessage_PubkeyBundles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HushMessage_PubkeyBundles.Merge(m, src)
}
func (m *HushMessage_PubkeyBundles) XXX_Size() int {
	return m.Size()
}
func (m *HushMessage_PubkeyBundles) XXX_DiscardUnknown() {
	xxx_messageInfo_HushMessage_PubkeyBundles.DiscardUnknown(m)
}

var xxx_messageInfo_HushMessage_PubkeyBundles proto.InternalMessageInfo

func (m *HushMessage_PubkeyBundles) GetBundles() []pb1.PubkeyBundle {
	if m != nil {
		return m.Bundles
	}
	return nil
}

type TreeMessage struct {
	// Types that are valid to be assigned to Payload:
	//	*TreeMessage_Tx
	//	*TreeMessage_EncryptedTx_
	//	*TreeMessage_Subscribe_
	//	*TreeMessage_Ack_
	//	*TreeMessage_AnnounceP2PStateURI_
	Payload isTreeMessage_Payload `protobuf_oneof:"payload"`
}

func (m *TreeMessage) Reset()      { *m = TreeMessage{} }
func (*TreeMessage) ProtoMessage() {}
func (*TreeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{3}
}
func (m *TreeMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TreeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TreeMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TreeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TreeMessage.Merge(m, src)
}
func (m *TreeMessage) XXX_Size() int {
	return m.Size()
}
func (m *TreeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TreeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TreeMessage proto.InternalMessageInfo

type isTreeMessage_Payload interface {
	isTreeMessage_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
}

type TreeMessage_Tx struct {
	Tx *pb2.Tx `protobuf:"bytes,1,opt,name=tx,proto3,oneof" json:"tx,omitempty"`
}
type TreeMessage_EncryptedTx_ struct {
	EncryptedTx *TreeMessage_EncryptedTx `protobuf:"bytes,2,opt,name=encryptedTx,proto3,oneof" json:"encryptedTx,omitempty"`
}
type TreeMessage_Subscribe_ struct {
	Subscribe *TreeMessage_Subscribe `protobuf:"bytes,3,opt,name=subscribe,proto3,oneof" json:"subscribe,omitempty"`
}
type TreeMessage_Ack_ struct {
	Ack *TreeMessage_Ack `protobuf:"bytes,4,opt,name=ack,proto3,oneof" json:"ack,omitempty"`
}
type TreeMessage_AnnounceP2PStateURI_ struct {
	AnnounceP2PStateURI *TreeMessage_AnnounceP2PStateURI `protobuf:"bytes,5,opt,name=announceP2PStateURI,proto3,oneof" json:"announceP2PStateURI,omitempty"`
}

func (*TreeMessage_Tx) isTreeMessage_Payload()                   {}
func (*TreeMessage_EncryptedTx_) isTreeMessage_Payload()         {}
func (*TreeMessage_Subscribe_) isTreeMessage_Payload()           {}
func (*TreeMessage_Ack_) isTreeMessage_Payload()                 {}
func (*TreeMessage_AnnounceP2PStateURI_) isTreeMessage_Payload() {}

func (m *TreeMessage) GetPayload() isTreeMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *TreeMessage) GetTx() *pb2.Tx {
	if x, ok := m.GetPayload().(*TreeMessage_Tx); ok {
		return x.Tx
	}
	return nil
}

func (m *TreeMessage) GetEncryptedTx() *TreeMessage_EncryptedTx {
	if x, ok := m.GetPayload().(*TreeMessage_EncryptedTx_); ok {
		return x.EncryptedTx
	}
	return nil
}

func (m *TreeMessage) GetSubscribe() *TreeMessage_Subscribe {
	if x, ok := m.GetPayload().(*TreeMessage_Subscribe_); ok {
		return x.Subscribe
	}
	return nil
}

func (m *TreeMessage) GetAck() *TreeMessage_Ack {
	if x, ok := m.GetPayload().(*TreeMessage_Ack_); ok {
		return x.Ack
	}
	return nil
}

func (m *TreeMessage) GetAnnounceP2PStateURI() *TreeMessage_AnnounceP2PStateURI {
	if x, ok := m.GetPayload().(*TreeMessage_AnnounceP2PStateURI_); ok {
		return x.AnnounceP2PStateURI
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TreeMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TreeMessage_Tx)(nil),
		(*TreeMessage_EncryptedTx_)(nil),
		(*TreeMessage_Subscribe_)(nil),
		(*TreeMessage_Ack_)(nil),
		(*TreeMessage_AnnounceP2PStateURI_)(nil),
	}
}

type TreeMessage_EncryptedTx struct {
	EncryptedTx pb1.GroupMessage `protobuf:"bytes,1,opt,name=encryptedTx,proto3" json:"encryptedTx"`
}

func (m *TreeMessage_EncryptedTx) Reset()      { *m = TreeMessage_EncryptedTx{} }
func (*TreeMessage_EncryptedTx) ProtoMessage() {}
func (*TreeMessage_EncryptedTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{3, 0}
}
func (m *TreeMessage_EncryptedTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TreeMessage_EncryptedTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TreeMessage_EncryptedTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TreeMessage_EncryptedTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TreeMessage_EncryptedTx.Merge(m, src)
}
func (m *TreeMessage_EncryptedTx) XXX_Size() int {
	return m.Size()
}
func (m *TreeMessage_EncryptedTx) XXX_DiscardUnknown() {
	xxx_messageInfo_TreeMessage_EncryptedTx.DiscardUnknown(m)
}

var xxx_messageInfo_TreeMessage_EncryptedTx proto.InternalMessageInfo

func (m *TreeMessage_EncryptedTx) GetEncryptedTx() pb1.GroupMessage {
	if m != nil {
		return m.EncryptedTx
	}
	return pb1.GroupMessage{}
}

type TreeMessage_Subscribe struct {
	StateURI string `protobuf:"bytes,1,opt,name=stateURI,proto3" json:"stateURI,omitempty"`
}

func (m *TreeMessage_Subscribe) Reset()      { *m = TreeMessage_Subscribe{} }
func (*TreeMessage_Subscribe) ProtoMessage() {}
func (*TreeMessage_Subscribe) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{3, 1}
}
func (m *TreeMessage_Subscribe) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TreeMessage_Subscribe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TreeMessage_Subscribe.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TreeMessage_Subscribe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TreeMessage_Subscribe.Merge(m, src)
}
func (m *TreeMessage_Subscribe) XXX_Size() int {
	return m.Size()
}
func (m *TreeMessage_Subscribe) XXX_DiscardUnknown() {
	xxx_messageInfo_TreeMessage_Subscribe.DiscardUnknown(m)
}

var xxx_messageInfo_TreeMessage_Subscribe proto.InternalMessageInfo

func (m *TreeMessage_Subscribe) GetStateURI() string {
	if m != nil {
		return m.StateURI
	}
	return ""
}

type TreeMessage_SubscriptionMsg struct {
	// Types that are valid to be assigned to Payload:
	//	*TreeMessage_SubscriptionMsg_Tx
	//	*TreeMessage_SubscriptionMsg_EncryptedTx
	Payload isTreeMessage_SubscriptionMsg_Payload `protobuf_oneof:"payload"`
}

func (m *TreeMessage_SubscriptionMsg) Reset()      { *m = TreeMessage_SubscriptionMsg{} }
func (*TreeMessage_SubscriptionMsg) ProtoMessage() {}
func (*TreeMessage_SubscriptionMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{3, 2}
}
func (m *TreeMessage_SubscriptionMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TreeMessage_SubscriptionMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TreeMessage_SubscriptionMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TreeMessage_SubscriptionMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TreeMessage_SubscriptionMsg.Merge(m, src)
}
func (m *TreeMessage_SubscriptionMsg) XXX_Size() int {
	return m.Size()
}
func (m *TreeMessage_SubscriptionMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_TreeMessage_SubscriptionMsg.DiscardUnknown(m)
}

var xxx_messageInfo_TreeMessage_SubscriptionMsg proto.InternalMessageInfo

type isTreeMessage_SubscriptionMsg_Payload interface {
	isTreeMessage_SubscriptionMsg_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
}

type TreeMessage_SubscriptionMsg_Tx struct {
	Tx *pb2.Tx `protobuf:"bytes,1,opt,name=tx,proto3,oneof" json:"tx,omitempty"`
}
type TreeMessage_SubscriptionMsg_EncryptedTx struct {
	EncryptedTx *pb1.GroupMessage `protobuf:"bytes,2,opt,name=encryptedTx,proto3,oneof" json:"encryptedTx,omitempty"`
}

func (*TreeMessage_SubscriptionMsg_Tx) isTreeMessage_SubscriptionMsg_Payload()          {}
func (*TreeMessage_SubscriptionMsg_EncryptedTx) isTreeMessage_SubscriptionMsg_Payload() {}

func (m *TreeMessage_SubscriptionMsg) GetPayload() isTreeMessage_SubscriptionMsg_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *TreeMessage_SubscriptionMsg) GetTx() *pb2.Tx {
	if x, ok := m.GetPayload().(*TreeMessage_SubscriptionMsg_Tx); ok {
		return x.Tx
	}
	return nil
}

func (m *TreeMessage_SubscriptionMsg) GetEncryptedTx() *pb1.GroupMessage {
	if x, ok := m.GetPayload().(*TreeMessage_SubscriptionMsg_EncryptedTx); ok {
		return x.EncryptedTx
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TreeMessage_SubscriptionMsg) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TreeMessage_SubscriptionMsg_Tx)(nil),
		(*TreeMessage_SubscriptionMsg_EncryptedTx)(nil),
	}
}

type TreeMessage_Ack struct {
	StateURI string                    `protobuf:"bytes,1,opt,name=stateURI,proto3" json:"stateURI,omitempty"`
	TxID     redwood_dev_state.Version `protobuf:"bytes,2,opt,name=txID,proto3,customtype=redwood.dev/state.Version" json:"txID"`
}

func (m *TreeMessage_Ack) Reset()      { *m = TreeMessage_Ack{} }
func (*TreeMessage_Ack) ProtoMessage() {}
func (*TreeMessage_Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{3, 3}
}
func (m *TreeMessage_Ack) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TreeMessage_Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TreeMessage_Ack.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TreeMessage_Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TreeMessage_Ack.Merge(m, src)
}
func (m *TreeMessage_Ack) XXX_Size() int {
	return m.Size()
}
func (m *TreeMessage_Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_TreeMessage_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_TreeMessage_Ack proto.InternalMessageInfo

func (m *TreeMessage_Ack) GetStateURI() string {
	if m != nil {
		return m.StateURI
	}
	return ""
}

type TreeMessage_AnnounceP2PStateURI struct {
	StateURI string `protobuf:"bytes,1,opt,name=stateURI,proto3" json:"stateURI,omitempty"`
}

func (m *TreeMessage_AnnounceP2PStateURI) Reset()      { *m = TreeMessage_AnnounceP2PStateURI{} }
func (*TreeMessage_AnnounceP2PStateURI) ProtoMessage() {}
func (*TreeMessage_AnnounceP2PStateURI) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{3, 4}
}
func (m *TreeMessage_AnnounceP2PStateURI) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TreeMessage_AnnounceP2PStateURI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TreeMessage_AnnounceP2PStateURI.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TreeMessage_AnnounceP2PStateURI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TreeMessage_AnnounceP2PStateURI.Merge(m, src)
}
func (m *TreeMessage_AnnounceP2PStateURI) XXX_Size() int {
	return m.Size()
}
func (m *TreeMessage_AnnounceP2PStateURI) XXX_DiscardUnknown() {
	xxx_messageInfo_TreeMessage_AnnounceP2PStateURI.DiscardUnknown(m)
}

var xxx_messageInfo_TreeMessage_AnnounceP2PStateURI proto.InternalMessageInfo

func (m *TreeMessage_AnnounceP2PStateURI) GetStateURI() string {
	if m != nil {
		return m.StateURI
	}
	return ""
}

type PeerMessage struct {
	// Types that are valid to be assigned to Payload:
	//	*PeerMessage_AnnouncePeers_
	Payload isPeerMessage_Payload `protobuf_oneof:"payload"`
}

func (m *PeerMessage) Reset()      { *m = PeerMessage{} }
func (*PeerMessage) ProtoMessage() {}
func (*PeerMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{4}
}
func (m *PeerMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeerMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeerMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeerMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerMessage.Merge(m, src)
}
func (m *PeerMessage) XXX_Size() int {
	return m.Size()
}
func (m *PeerMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PeerMessage proto.InternalMessageInfo

type isPeerMessage_Payload interface {
	isPeerMessage_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PeerMessage_AnnouncePeers_ struct {
	AnnouncePeers *PeerMessage_AnnouncePeers `protobuf:"bytes,1,opt,name=announcePeers,proto3,oneof" json:"announcePeers,omitempty"`
}

func (*PeerMessage_AnnouncePeers_) isPeerMessage_Payload() {}

func (m *PeerMessage) GetPayload() isPeerMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *PeerMessage) GetAnnouncePeers() *PeerMessage_AnnouncePeers {
	if x, ok := m.GetPayload().(*PeerMessage_AnnouncePeers_); ok {
		return x.AnnouncePeers
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PeerMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PeerMessage_AnnouncePeers_)(nil),
	}
}

type PeerMessage_AnnouncePeers struct {
	DialInfos []redwood_dev_swarm.PeerDialInfo `protobuf:"bytes,1,rep,name=dialInfos,proto3,customtype=redwood.dev/swarm.PeerDialInfo" json:"dialInfos,omitempty"`
}

func (m *PeerMessage_AnnouncePeers) Reset()      { *m = PeerMessage_AnnouncePeers{} }
func (*PeerMessage_AnnouncePeers) ProtoMessage() {}
func (*PeerMessage_AnnouncePeers) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{4, 0}
}
func (m *PeerMessage_AnnouncePeers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeerMessage_AnnouncePeers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeerMessage_AnnouncePeers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeerMessage_AnnouncePeers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerMessage_AnnouncePeers.Merge(m, src)
}
func (m *PeerMessage_AnnouncePeers) XXX_Size() int {
	return m.Size()
}
func (m *PeerMessage_AnnouncePeers) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerMessage_AnnouncePeers.DiscardUnknown(m)
}

var xxx_messageInfo_PeerMessage_AnnouncePeers proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AuthMessage)(nil), "Redwood.swarm.libp2p.AuthMessage")
	proto.RegisterType((*AuthMessage_ChallengeRequest)(nil), "Redwood.swarm.libp2p.AuthMessage.ChallengeRequest")
	proto.RegisterType((*AuthMessage_Challenge)(nil), "Redwood.swarm.libp2p.AuthMessage.Challenge")
	proto.RegisterType((*AuthMessage_Signatures)(nil), "Redwood.swarm.libp2p.AuthMessage.Signatures")
	proto.RegisterType((*AuthMessage_Ucan)(nil), "Redwood.swarm.libp2p.AuthMessage.Ucan")
	proto.RegisterType((*BlobMessage)(nil), "Redwood.swarm.libp2p.BlobMessage")
	proto.RegisterType((*BlobMessage_FetchManifest)(nil), "Redwood.swarm.libp2p.BlobMessage.FetchManifest")
	proto.RegisterType((*BlobMessage_SendManifest)(nil), "Redwood.swarm.libp2p.BlobMessage.SendManifest")
	proto.RegisterType((*BlobMessage_FetchChunk)(nil), "Redwood.swarm.libp2p.BlobMessage.FetchChunk")
	proto.RegisterType((*BlobMessage_SendChunk)(nil), "Redwood.swarm.libp2p.BlobMessage.SendChunk")
	proto.RegisterType((*HushMessage)(nil), "Redwood.swarm.libp2p.HushMessage")
	proto.RegisterType((*HushMessage_PubkeyBundles)(nil), "Redwood.swarm.libp2p.HushMessage.PubkeyBundles")
	proto.RegisterType((*TreeMessage)(nil), "Redwood.swarm.libp2p.TreeMessage")
	proto.RegisterType((*TreeMessage_EncryptedTx)(nil), "Redwood.swarm.libp2p.TreeMessage.EncryptedTx")
	proto.RegisterType((*TreeMessage_Subscribe)(nil), "Redwood.swarm.libp2p.TreeMessage.Subscribe")
	proto.RegisterType((*TreeMessage_SubscriptionMsg)(nil), "Redwood.swarm.libp2p.TreeMessage.SubscriptionMsg")
	proto.RegisterType((*TreeMessage_Ack)(nil), "Redwood.swarm.libp2p.TreeMessage.Ack")
	proto.RegisterType((*TreeMessage_AnnounceP2PStateURI)(nil), "Redwood.swarm.libp2p.TreeMessage.AnnounceP2PStateURI")
	proto.RegisterType((*PeerMessage)(nil), "Redwood.swarm.libp2p.PeerMessage")
	proto.RegisterType((*PeerMessage_AnnouncePeers)(nil), "Redwood.swarm.libp2p.PeerMessage.AnnouncePeers")
}

func init() { proto.RegisterFile("libp2p.proto", fileDescriptor_cad2813fa2bf04bd) }

var fileDescriptor_cad2813fa2bf04bd = []byte{
	// 1060 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0xcf, 0x8f, 0xdb, 0x44,
	0x14, 0xc7, 0xed, 0xdd, 0x74, 0xbb, 0x79, 0xc9, 0x96, 0xd5, 0xb4, 0xaa, 0x82, 0x29, 0xce, 0xb2,
	0xa2, 0xb4, 0xa2, 0xd4, 0x11, 0x59, 0x55, 0x6a, 0x25, 0x0e, 0x24, 0xcd, 0x52, 0x47, 0x10, 0x94,
	0x4e, 0xb6, 0x05, 0x21, 0x0e, 0xb5, 0x9d, 0xd9, 0xc4, 0xda, 0xac, 0x6d, 0xfc, 0x83, 0x66, 0x6f,
	0xdc, 0xb9, 0xf0, 0x47, 0x70, 0xe0, 0x4f, 0xe0, 0xc8, 0x01, 0xa4, 0x72, 0xdb, 0x63, 0xb5, 0x87,
	0xa8, 0xf1, 0x5e, 0xe0, 0xd6, 0x63, 0x8f, 0x68, 0xc6, 0xbf, 0xc6, 0x49, 0x48, 0xb6, 0xa7, 0x64,
	0xc6, 0xef, 0xfb, 0x99, 0x79, 0xef, 0x7d, 0x9f, 0x0d, 0xe5, 0x91, 0xa9, 0x3b, 0x75, 0x47, 0x71,
	0x5c, 0xdb, 0xb7, 0xd1, 0x35, 0x4c, 0xfa, 0xcf, 0x6d, 0xbb, 0xaf, 0x78, 0xcf, 0x35, 0xf7, 0x58,
	0x89, 0x9e, 0x49, 0x77, 0x07, 0xa6, 0x3f, 0x0c, 0x74, 0xc5, 0xb0, 0x8f, 0x6b, 0x03, 0x7b, 0x60,
	0xd7, 0x58, 0xb0, 0x1e, 0x1c, 0xb2, 0x15, 0x5b, 0xb0, 0x7f, 0x11, 0x44, 0x42, 0xfa, 0xc8, 0xd6,
	0x6b, 0x8e, 0x5e, 0xa3, 0xbf, 0xf1, 0xde, 0xb6, 0xef, 0x12, 0x42, 0xf7, 0xfc, 0x71, 0xbc, 0xf3,
	0x3e, 0x3b, 0x22, 0x42, 0x0d, 0x03, 0x6f, 0x48, 0x1f, 0xd2, 0xdf, 0xe8, 0xf1, 0xee, 0x5f, 0x97,
	0xa0, 0xd4, 0x08, 0xfc, 0x61, 0x87, 0x78, 0x9e, 0x36, 0x20, 0xe8, 0x19, 0x6c, 0x1b, 0x43, 0x6d,
	0x34, 0x22, 0xd6, 0x80, 0x60, 0xf2, 0x43, 0x40, 0x3c, 0xbf, 0x22, 0xee, 0x88, 0xb7, 0x4b, 0xf5,
	0xba, 0xb2, 0xe8, 0xd2, 0x0a, 0x27, 0x56, 0x1e, 0xce, 0x28, 0x55, 0x01, 0xcf, 0xd1, 0xd0, 0x97,
	0x50, 0x4c, 0xf7, 0x2a, 0x6b, 0x0c, 0x7d, 0xe7, 0x2d, 0xd0, 0xaa, 0x80, 0x33, 0x3d, 0xfa, 0x1a,
	0xc0, 0x33, 0x07, 0x96, 0xe6, 0x07, 0x2e, 0xf1, 0x2a, 0xeb, 0x8c, 0xf6, 0xc9, 0x6a, 0x5a, 0x2f,
	0xd5, 0xa8, 0x02, 0xe6, 0x08, 0xe8, 0x33, 0x28, 0x04, 0x86, 0x66, 0x55, 0x0a, 0x8c, 0xf4, 0xd1,
	0x6a, 0xd2, 0x13, 0x43, 0xb3, 0x54, 0x01, 0x33, 0x95, 0x84, 0x60, 0x7b, 0xb6, 0x04, 0x12, 0x86,
	0x62, 0xba, 0x87, 0xf6, 0xf9, 0xdc, 0x69, 0x59, 0xcb, 0xcd, 0x5b, 0x2f, 0x26, 0x55, 0xe1, 0x6c,
	0x52, 0xad, 0xba, 0xf1, 0x51, 0x7d, 0xf2, 0x63, 0xcd, 0x70, 0x4f, 0x1c, 0xdf, 0xce, 0x92, 0xee,
	0x78, 0x03, 0x2e, 0x6b, 0xe9, 0x5f, 0x11, 0x20, 0x4b, 0x01, 0x3d, 0x02, 0x48, 0x9f, 0x79, 0x15,
	0x71, 0x67, 0xfd, 0x6d, 0xb0, 0x9c, 0x14, 0xb5, 0x72, 0xd5, 0x5c, 0x63, 0xa0, 0x0f, 0x63, 0xd0,
	0x8d, 0x05, 0xa0, 0xf4, 0x0e, 0xb9, 0x1a, 0x7e, 0x05, 0x57, 0x34, 0xef, 0xe4, 0x78, 0xdf, 0x32,
	0xba, 0x81, 0x7e, 0x44, 0x4e, 0x68, 0x5f, 0x18, 0xe9, 0x6c, 0x52, 0xdd, 0x59, 0x40, 0x69, 0xf0,
	0xc1, 0x78, 0x46, 0x2b, 0x49, 0x50, 0xa0, 0x35, 0x46, 0x28, 0xee, 0x0c, 0xad, 0x5a, 0x31, 0xaa,
	0x77, 0xb3, 0x08, 0x97, 0x1d, 0xed, 0x64, 0x64, 0x6b, 0xfd, 0xdd, 0x37, 0x05, 0x28, 0x35, 0x47,
	0xb6, 0x9e, 0xf8, 0xf8, 0x1b, 0xd8, 0x3a, 0x24, 0xbe, 0x31, 0xec, 0x68, 0x96, 0x79, 0x98, 0x99,
	0xb8, 0xb6, 0xb8, 0xa3, 0x9c, 0x52, 0xf9, 0x82, 0x97, 0xa9, 0x02, 0xce, 0x73, 0xd0, 0x01, 0x94,
	0x3d, 0x62, 0xf5, 0x53, 0x6e, 0xe4, 0x60, 0x65, 0x35, 0xb7, 0xc7, 0xa9, 0x54, 0x01, 0xe7, 0x28,
	0xd4, 0xc7, 0xec, 0x98, 0x87, 0xc3, 0xc0, 0x3a, 0x5a, 0xee, 0xe3, 0xb9, 0xbb, 0x32, 0x0d, 0xf5,
	0x71, 0x46, 0xa0, 0x43, 0x46, 0xf9, 0x11, 0xae, 0xb0, 0x6c, 0xc8, 0x66, 0xaf, 0x98, 0xd0, 0x32,
	0xbd, 0xd4, 0x86, 0xad, 0x5c, 0x51, 0xd0, 0x7d, 0xd8, 0xa0, 0xef, 0x9c, 0x76, 0x2b, 0xae, 0xea,
	0x76, 0x8a, 0x66, 0xaf, 0xa2, 0x76, 0xab, 0x79, 0x85, 0xba, 0x26, 0x9c, 0x54, 0x37, 0x9a, 0x2c,
	0x0e, 0xc7, 0xf1, 0xd2, 0x33, 0x28, 0xf3, 0x75, 0x40, 0xf7, 0x61, 0xf3, 0x38, 0xdf, 0xa1, 0xeb,
	0x79, 0x56, 0x12, 0xd9, 0x2c, 0x50, 0x22, 0x4e, 0xa3, 0xd1, 0x75, 0xd8, 0x20, 0x63, 0xd3, 0xf3,
	0x3d, 0xd6, 0x81, 0x4d, 0x1c, 0xaf, 0xa4, 0x8f, 0x01, 0xb2, 0xaa, 0xa0, 0x1b, 0x50, 0xf0, 0x86,
	0xda, 0x5e, 0x3c, 0x6b, 0x9b, 0xe1, 0xa4, 0x5a, 0xe8, 0xa9, 0x8d, 0x3d, 0xcc, 0x76, 0xa5, 0x07,
	0x50, 0x4c, 0x53, 0x46, 0xd7, 0xe0, 0x92, 0xc1, 0xca, 0xc5, 0x62, 0x71, 0xb4, 0xf8, 0xbf, 0x63,
	0x78, 0xeb, 0xfd, 0x2d, 0x42, 0x49, 0x0d, 0xbc, 0x21, 0x67, 0x3d, 0x87, 0x99, 0xb7, 0x19, 0x58,
	0xfd, 0x11, 0x9b, 0xc8, 0x25, 0xd6, 0xe3, 0x94, 0x4a, 0x97, 0x97, 0x51, 0xeb, 0xe5, 0x38, 0xd2,
	0x53, 0xd8, 0xca, 0x45, 0xa0, 0x7d, 0xb8, 0xac, 0xa7, 0x67, 0xac, 0xdf, 0x2e, 0xd5, 0x6f, 0xce,
	0x9c, 0x91, 0xbe, 0xf5, 0x73, 0xe8, 0xb8, 0x96, 0x89, 0x96, 0xcf, 0xe5, 0xd7, 0x0d, 0x28, 0x1d,
	0xb8, 0x84, 0x24, 0xb9, 0xec, 0xc2, 0x9a, 0x3f, 0x9e, 0xeb, 0x32, 0xfd, 0xc8, 0x28, 0x07, 0x63,
	0x55, 0xc0, 0x6b, 0xfe, 0x18, 0x3d, 0x86, 0x12, 0xb1, 0xd8, 0x2c, 0x93, 0xfe, 0xc1, 0x38, 0x1e,
	0x88, 0xbb, 0x8b, 0xb3, 0xe5, 0xd8, 0xca, 0x7e, 0x26, 0x52, 0x05, 0xcc, 0x33, 0x98, 0x7d, 0x03,
	0xdd, 0x33, 0x5c, 0x53, 0x27, 0xf1, 0x34, 0xdc, 0x59, 0x0d, 0xec, 0x25, 0x12, 0x66, 0xdf, 0x64,
	0x81, 0x1e, 0xc0, 0xba, 0x66, 0x24, 0x53, 0x70, 0x73, 0x35, 0xa6, 0x61, 0x50, 0xff, 0x53, 0x0d,
	0x32, 0xe1, 0xaa, 0x66, 0x59, 0x76, 0x60, 0x19, 0xa4, 0x5b, 0xef, 0xf6, 0x7c, 0xcd, 0x27, 0x4f,
	0x70, 0xbb, 0x72, 0x89, 0xa1, 0xee, 0x5d, 0x00, 0x35, 0x2f, 0x56, 0x05, 0xbc, 0x88, 0x29, 0x7d,
	0x0f, 0x25, 0xae, 0x20, 0xa8, 0x93, 0x2f, 0xaa, 0xb8, 0xf0, 0xf2, 0x59, 0x7b, 0x1f, 0xb9, 0x76,
	0xe0, 0xc4, 0xa7, 0xc6, 0xed, 0xe5, 0xf5, 0xd2, 0x2d, 0x28, 0xa6, 0xd5, 0x41, 0x12, 0x6c, 0x7a,
	0x49, 0x2a, 0xd1, 0xeb, 0x34, 0x5d, 0x4b, 0x3f, 0x8b, 0xf0, 0x4e, 0x1c, 0xe9, 0xf8, 0xa6, 0x6d,
	0x75, 0xbc, 0xc1, 0x85, 0x4c, 0xd0, 0x5e, 0x64, 0x82, 0x8b, 0xdd, 0x77, 0xa6, 0xf9, 0x9c, 0x1d,
	0xa5, 0x6f, 0x61, 0xbd, 0x61, 0x1c, 0x2d, 0xbb, 0x30, 0xba, 0x07, 0x05, 0x7f, 0xdc, 0x6e, 0xb1,
	0x13, 0xcb, 0xcd, 0x0f, 0xe2, 0xaf, 0xd5, 0xbb, 0xfc, 0x77, 0x86, 0xc5, 0x2a, 0x4f, 0x89, 0xeb,
	0x99, 0xb6, 0x85, 0x59, 0xb8, 0xf4, 0x29, 0x5c, 0x5d, 0xd0, 0x9c, 0x65, 0x27, 0xf1, 0x63, 0xf2,
	0xa7, 0x08, 0xa5, 0x2e, 0x21, 0x2e, 0x37, 0xf2, 0x69, 0x4f, 0x09, 0x71, 0x57, 0x8c, 0x3c, 0xa7,
	0xcc, 0x1c, 0x42, 0x65, 0x74, 0xe4, 0x73, 0x1c, 0xe9, 0x31, 0x6c, 0xe5, 0x22, 0xd0, 0xe7, 0x50,
	0xec, 0x9b, 0xda, 0xa8, 0x6d, 0x1d, 0xda, 0xc9, 0xa7, 0x7e, 0xf7, 0x6c, 0x52, 0x95, 0x73, 0xf9,
	0xb2, 0xc3, 0x68, 0x7c, 0x2b, 0x0e, 0xc5, 0x99, 0x88, 0x4b, 0xa3, 0xa9, 0x9d, 0x4e, 0x65, 0xe1,
	0xe5, 0x54, 0x16, 0x5e, 0x4d, 0x65, 0xe1, 0xf5, 0x54, 0x16, 0xdf, 0x4c, 0x65, 0xf1, 0xa7, 0x50,
	0x16, 0x7f, 0x0b, 0x65, 0xe1, 0xf7, 0x50, 0x16, 0xfe, 0x08, 0x65, 0xf1, 0x45, 0x28, 0x8b, 0xa7,
	0xa1, 0x2c, 0xbe, 0x0a, 0x65, 0xf1, 0x9f, 0x50, 0x16, 0x5e, 0x87, 0xb2, 0xf8, 0xcb, 0xb9, 0x2c,
	0x9c, 0x9e, 0xcb, 0xc2, 0xcb, 0x73, 0x59, 0xf8, 0xee, 0xbd, 0xb9, 0xb3, 0x6b, 0x51, 0xa2, 0x35,
	0x47, 0xd7, 0x37, 0x58, 0xcf, 0xf7, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x3a, 0x8b, 0x62, 0x91,
	0x00, 0x0b, 0x00, 0x00,
}

func (this *AuthMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.AuthMessage{")
	if this.Payload != nil {
		s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthMessage_ChallengeRequest_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.AuthMessage_ChallengeRequest_{` +
		`ChallengeRequest:` + fmt.Sprintf("%#v", this.ChallengeRequest) + `}`}, ", ")
	return s
}
func (this *AuthMessage_Challenge_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.AuthMessage_Challenge_{` +
		`Challenge:` + fmt.Sprintf("%#v", this.Challenge) + `}`}, ", ")
	return s
}
func (this *AuthMessage_Signatures_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.AuthMessage_Signatures_{` +
		`Signatures:` + fmt.Sprintf("%#v", this.Signatures) + `}`}, ", ")
	return s
}
func (this *AuthMessage_Ucan_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.AuthMessage_Ucan_{` +
		`Ucan:` + fmt.Sprintf("%#v", this.Ucan) + `}`}, ", ")
	return s
}
func (this *AuthMessage_ChallengeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.AuthMessage_ChallengeRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthMessage_Challenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.AuthMessage_Challenge{")
	s = append(s, "Challenge: "+fmt.Sprintf("%#v", this.Challenge)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthMessage_Signatures) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.AuthMessage_Signatures{")
	s = append(s, "Challenges: "+fmt.Sprintf("%#v", this.Challenges)+",\n")
	s = append(s, "Signatures: "+fmt.Sprintf("%#v", this.Signatures)+",\n")
	s = append(s, "AsymEncPubkeys: "+fmt.Sprintf("%#v", this.AsymEncPubkeys)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthMessage_Ucan) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.AuthMessage_Ucan{")
	s = append(s, "Ucan: "+fmt.Sprintf("%#v", this.Ucan)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BlobMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.BlobMessage{")
	if this.Payload != nil {
		s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BlobMessage_FetchManifest_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.BlobMessage_FetchManifest_{` +
		`FetchManifest:` + fmt.Sprintf("%#v", this.FetchManifest) + `}`}, ", ")
	return s
}
func (this *BlobMessage_SendManifest_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.BlobMessage_SendManifest_{` +
		`SendManifest:` + fmt.Sprintf("%#v", this.SendManifest) + `}`}, ", ")
	return s
}
func (this *BlobMessage_FetchChunk_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.BlobMessage_FetchChunk_{` +
		`FetchChunk:` + fmt.Sprintf("%#v", this.FetchChunk) + `}`}, ", ")
	return s
}
func (this *BlobMessage_SendChunk_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.BlobMessage_SendChunk_{` +
		`SendChunk:` + fmt.Sprintf("%#v", this.SendChunk) + `}`}, ", ")
	return s
}
func (this *BlobMessage_FetchManifest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.BlobMessage_FetchManifest{")
	s = append(s, "BlobID: "+strings.Replace(this.BlobID.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BlobMessage_SendManifest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.BlobMessage_SendManifest{")
	s = append(s, "Manifest: "+strings.Replace(this.Manifest.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Exists: "+fmt.Sprintf("%#v", this.Exists)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BlobMessage_FetchChunk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.BlobMessage_FetchChunk{")
	s = append(s, "SHA3: "+fmt.Sprintf("%#v", this.SHA3)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BlobMessage_SendChunk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.BlobMessage_SendChunk{")
	s = append(s, "Chunk: "+fmt.Sprintf("%#v", this.Chunk)+",\n")
	s = append(s, "Exists: "+fmt.Sprintf("%#v", this.Exists)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HushMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.HushMessage{")
	if this.Payload != nil {
		s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HushMessage_PubkeyBundles_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.HushMessage_PubkeyBundles_{` +
		`PubkeyBundles:` + fmt.Sprintf("%#v", this.PubkeyBundles) + `}`}, ", ")
	return s
}
func (this *HushMessage_PubkeyBundles) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.HushMessage_PubkeyBundles{")
	if this.Bundles != nil {
		vs := make([]pb1.PubkeyBundle, len(this.Bundles))
		for i := range vs {
			vs[i] = this.Bundles[i]
		}
		s = append(s, "Bundles: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TreeMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.TreeMessage{")
	if this.Payload != nil {
		s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TreeMessage_Tx) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.TreeMessage_Tx{` +
		`Tx:` + fmt.Sprintf("%#v", this.Tx) + `}`}, ", ")
	return s
}
func (this *TreeMessage_EncryptedTx_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.TreeMessage_EncryptedTx_{` +
		`EncryptedTx:` + fmt.Sprintf("%#v", this.EncryptedTx) + `}`}, ", ")
	return s
}
func (this *TreeMessage_Subscribe_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.TreeMessage_Subscribe_{` +
		`Subscribe:` + fmt.Sprintf("%#v", this.Subscribe) + `}`}, ", ")
	return s
}
func (this *TreeMessage_Ack_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.TreeMessage_Ack_{` +
		`Ack:` + fmt.Sprintf("%#v", this.Ack) + `}`}, ", ")
	return s
}
func (this *TreeMessage_AnnounceP2PStateURI_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.TreeMessage_AnnounceP2PStateURI_{` +
		`AnnounceP2PStateURI:` + fmt.Sprintf("%#v", this.AnnounceP2PStateURI) + `}`}, ", ")
	return s
}
func (this *TreeMessage_EncryptedTx) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.TreeMessage_EncryptedTx{")
	s = append(s, "EncryptedTx: "+strings.Replace(this.EncryptedTx.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TreeMessage_Subscribe) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.TreeMessage_Subscribe{")
	s = append(s, "StateURI: "+fmt.Sprintf("%#v", this.StateURI)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TreeMessage_SubscriptionMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.TreeMessage_SubscriptionMsg{")
	if this.Payload != nil {
		s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TreeMessage_SubscriptionMsg_Tx) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.TreeMessage_SubscriptionMsg_Tx{` +
		`Tx:` + fmt.Sprintf("%#v", this.Tx) + `}`}, ", ")
	return s
}
func (this *TreeMessage_SubscriptionMsg_EncryptedTx) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.TreeMessage_SubscriptionMsg_EncryptedTx{` +
		`EncryptedTx:` + fmt.Sprintf("%#v", this.EncryptedTx) + `}`}, ", ")
	return s
}
func (this *TreeMessage_Ack) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.TreeMessage_Ack{")
	s = append(s, "StateURI: "+fmt.Sprintf("%#v", this.StateURI)+",\n")
	s = append(s, "TxID: "+fmt.Sprintf("%#v", this.TxID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TreeMessage_AnnounceP2PStateURI) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.TreeMessage_AnnounceP2PStateURI{")
	s = append(s, "StateURI: "+fmt.Sprintf("%#v", this.StateURI)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PeerMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.PeerMessage{")
	if this.Payload != nil {
		s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PeerMessage_AnnouncePeers_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.PeerMessage_AnnouncePeers_{` +
		`AnnouncePeers:` + fmt.Sprintf("%#v", this.AnnouncePeers) + `}`}, ", ")
	return s
}
func (this *PeerMessage_AnnouncePeers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.PeerMessage_AnnouncePeers{")
	s = append(s, "DialInfos: "+fmt.Sprintf("%#v", this.DialInfos)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringLibp2P(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *AuthMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AuthMessage_ChallengeRequest_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthMessage_ChallengeRequest_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChallengeRequest != nil {
		{
			size, err := m.ChallengeRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *AuthMessage_Challenge_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthMessage_Challenge_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Challenge != nil {
		{
			size, err := m.Challenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *AuthMessage_Signatures_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthMessage_Signatures_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Signatures != nil {
		{
			size, err := m.Signatures.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *AuthMessage_Ucan_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthMessage_Ucan_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ucan != nil {
		{
			size, err := m.Ucan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *AuthMessage_ChallengeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthMessage_ChallengeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthMessage_ChallengeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AuthMessage_Challenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthMessage_Challenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthMessage_Challenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Challenge.Size()
		i -= size
		if _, err := m.Challenge.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLibp2P(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AuthMessage_Signatures) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthMessage_Signatures) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthMessage_Signatures) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AsymEncPubkeys) > 0 {
		for iNdEx := len(m.AsymEncPubkeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.AsymEncPubkeys[iNdEx].Size()
				i -= size
				if _, err := m.AsymEncPubkeys[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintLibp2P(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Signatures) > 0 {
		for iNdEx := len(m.Signatures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Signatures[iNdEx].Size()
				i -= size
				if _, err := m.Signatures[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintLibp2P(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Challenges) > 0 {
		for iNdEx := len(m.Challenges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Challenges[iNdEx].Size()
				i -= size
				if _, err := m.Challenges[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintLibp2P(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AuthMessage_Ucan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthMessage_Ucan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthMessage_Ucan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ucan) > 0 {
		i -= len(m.Ucan)
		copy(dAtA[i:], m.Ucan)
		i = encodeVarintLibp2P(dAtA, i, uint64(len(m.Ucan)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlobMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlobMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlobMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *BlobMessage_FetchManifest_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlobMessage_FetchManifest_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FetchManifest != nil {
		{
			size, err := m.FetchManifest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *BlobMessage_SendManifest_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlobMessage_SendManifest_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SendManifest != nil {
		{
			size, err := m.SendManifest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *BlobMessage_FetchChunk_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlobMessage_FetchChunk_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FetchChunk != nil {
		{
			size, err := m.FetchChunk.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *BlobMessage_SendChunk_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlobMessage_SendChunk_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SendChunk != nil {
		{
			size, err := m.SendChunk.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *BlobMessage_FetchManifest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlobMessage_FetchManifest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlobMessage_FetchManifest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BlobID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLibp2P(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BlobMessage_SendManifest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlobMessage_SendManifest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlobMessage_SendManifest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exists {
		i--
		if m.Exists {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Manifest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLibp2P(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BlobMessage_FetchChunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlobMessage_FetchChunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlobMessage_FetchChunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SHA3) > 0 {
		i -= len(m.SHA3)
		copy(dAtA[i:], m.SHA3)
		i = encodeVarintLibp2P(dAtA, i, uint64(len(m.SHA3)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlobMessage_SendChunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlobMessage_SendChunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlobMessage_SendChunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exists {
		i--
		if m.Exists {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Chunk) > 0 {
		i -= len(m.Chunk)
		copy(dAtA[i:], m.Chunk)
		i = encodeVarintLibp2P(dAtA, i, uint64(len(m.Chunk)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HushMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HushMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HushMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *HushMessage_PubkeyBundles_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HushMessage_PubkeyBundles_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PubkeyBundles != nil {
		{
			size, err := m.PubkeyBundles.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *HushMessage_PubkeyBundles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HushMessage_PubkeyBundles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HushMessage_PubkeyBundles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bundles) > 0 {
		for iNdEx := len(m.Bundles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bundles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLibp2P(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TreeMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TreeMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TreeMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *TreeMessage_Tx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TreeMessage_Tx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Tx != nil {
		{
			size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *TreeMessage_EncryptedTx_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TreeMessage_EncryptedTx_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EncryptedTx != nil {
		{
			size, err := m.EncryptedTx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *TreeMessage_Subscribe_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TreeMessage_Subscribe_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Subscribe != nil {
		{
			size, err := m.Subscribe.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *TreeMessage_Ack_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TreeMessage_Ack_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ack != nil {
		{
			size, err := m.Ack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *TreeMessage_AnnounceP2PStateURI_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TreeMessage_AnnounceP2PStateURI_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnnounceP2PStateURI != nil {
		{
			size, err := m.AnnounceP2PStateURI.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *TreeMessage_EncryptedTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TreeMessage_EncryptedTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TreeMessage_EncryptedTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EncryptedTx.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLibp2P(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TreeMessage_Subscribe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TreeMessage_Subscribe) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TreeMessage_Subscribe) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StateURI) > 0 {
		i -= len(m.StateURI)
		copy(dAtA[i:], m.StateURI)
		i = encodeVarintLibp2P(dAtA, i, uint64(len(m.StateURI)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TreeMessage_SubscriptionMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TreeMessage_SubscriptionMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TreeMessage_SubscriptionMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *TreeMessage_SubscriptionMsg_Tx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TreeMessage_SubscriptionMsg_Tx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Tx != nil {
		{
			size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *TreeMessage_SubscriptionMsg_EncryptedTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TreeMessage_SubscriptionMsg_EncryptedTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EncryptedTx != nil {
		{
			size, err := m.EncryptedTx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *TreeMessage_Ack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TreeMessage_Ack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TreeMessage_Ack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TxID.Size()
		i -= size
		if _, err := m.TxID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLibp2P(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.StateURI) > 0 {
		i -= len(m.StateURI)
		copy(dAtA[i:], m.StateURI)
		i = encodeVarintLibp2P(dAtA, i, uint64(len(m.StateURI)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TreeMessage_AnnounceP2PStateURI) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TreeMessage_AnnounceP2PStateURI) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TreeMessage_AnnounceP2PStateURI) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StateURI) > 0 {
		i -= len(m.StateURI)
		copy(dAtA[i:], m.StateURI)
		i = encodeVarintLibp2P(dAtA, i, uint64(len(m.StateURI)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PeerMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *PeerMessage_AnnouncePeers_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerMessage_AnnouncePeers_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnnouncePeers != nil {
		{
			size, err := m.AnnouncePeers.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *PeerMessage_AnnouncePeers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerMessage_AnnouncePeers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerMessage_AnnouncePeers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DialInfos) > 0 {
		for iNdEx := len(m.DialInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.DialInfos[iNdEx].Size()
				i -= size
				if _, err := m.DialInfos[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintLibp2P(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintLibp2P(dAtA []byte, offset int, v uint64) int {
	offset -= sovLibp2P(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedAuthMessage(r randyLibp2P, easy bool) *AuthMessage {
	this := &AuthMessage{}
	oneofNumber_Payload := []int32{1, 2, 3, 4}[r.Intn(4)]
	switch oneofNumber_Payload {
	case 1:
		this.Payload = NewPopulatedAuthMessage_ChallengeRequest_(r, easy)
	case 2:
		this.Payload = NewPopulatedAuthMessage_Challenge_(r, easy)
	case 3:
		this.Payload = NewPopulatedAuthMessage_Signatures_(r, easy)
	case 4:
		this.Payload = NewPopulatedAuthMessage_Ucan_(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAuthMessage_ChallengeRequest_(r randyLibp2P, easy bool) *AuthMessage_ChallengeRequest_ {
	this := &AuthMessage_ChallengeRequest_{}
	this.ChallengeRequest = NewPopulatedAuthMessage_ChallengeRequest(r, easy)
	return this
}
func NewPopulatedAuthMessage_Challenge_(r randyLibp2P, easy bool) *AuthMessage_Challenge_ {
	this := &AuthMessage_Challenge_{}
	this.Challenge = NewPopulatedAuthMessage_Challenge(r, easy)
	return this
}
func NewPopulatedAuthMessage_Signatures_(r randyLibp2P, easy bool) *AuthMessage_Signatures_ {
	this := &AuthMessage_Signatures_{}
	this.Signatures = NewPopulatedAuthMessage_Signatures(r, easy)
	return this
}
func NewPopulatedAuthMessage_Ucan_(r randyLibp2P, easy bool) *AuthMessage_Ucan_ {
	this := &AuthMessage_Ucan_{}
	this.Ucan = NewPopulatedAuthMessage_Ucan(r, easy)
	return this
}
func NewPopulatedAuthMessage_ChallengeRequest(r randyLibp2P, easy bool) *AuthMessage_ChallengeRequest {
	this := &AuthMessage_ChallengeRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAuthMessage_Challenge(r randyLibp2P, easy bool) *AuthMessage_Challenge {
	this := &AuthMessage_Challenge{}
	v1 := redwood_dev_crypto.NewPopulatedChallengeMsg(r)
	this.Challenge = *v1
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAuthMessage_Signatures(r randyLibp2P, easy bool) *AuthMessage_Signatures {
	this := &AuthMessage_Signatures{}
	v2 := r.Intn(10)
	this.Challenges = make([]redwood_dev_crypto.ChallengeMsg, v2)
	for i := 0; i < v2; i++ {
		v3 := redwood_dev_crypto.NewPopulatedChallengeMsg(r)
		this.Challenges[i] = *v3
	}
	v4 := r.Intn(10)
	this.Signatures = make([]redwood_dev_crypto.Signature, v4)
	for i := 0; i < v4; i++ {
		v5 := redwood_dev_crypto.NewPopulatedSignature(r)
		this.Signatures[i] = *v5
	}
	v6 := r.Intn(10)
	this.AsymEncPubkeys = make([]redwood_dev_crypto.AsymEncPubkey, v6)
	for i := 0; i < v6; i++ {
		v7 := redwood_dev_crypto.NewPopulatedAsymEncPubkey(r)
		this.AsymEncPubkeys[i] = *v7
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAuthMessage_Ucan(r randyLibp2P, easy bool) *AuthMessage_Ucan {
	this := &AuthMessage_Ucan{}
	this.Ucan = string(randStringLibp2P(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBlobMessage(r randyLibp2P, easy bool) *BlobMessage {
	this := &BlobMessage{}
	oneofNumber_Payload := []int32{1, 2, 3, 4}[r.Intn(4)]
	switch oneofNumber_Payload {
	case 1:
		this.Payload = NewPopulatedBlobMessage_FetchManifest_(r, easy)
	case 2:
		this.Payload = NewPopulatedBlobMessage_SendManifest_(r, easy)
	case 3:
		this.Payload = NewPopulatedBlobMessage_FetchChunk_(r, easy)
	case 4:
		this.Payload = NewPopulatedBlobMessage_SendChunk_(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBlobMessage_FetchManifest_(r randyLibp2P, easy bool) *BlobMessage_FetchManifest_ {
	this := &BlobMessage_FetchManifest_{}
	this.FetchManifest = NewPopulatedBlobMessage_FetchManifest(r, easy)
	return this
}
func NewPopulatedBlobMessage_SendManifest_(r randyLibp2P, easy bool) *BlobMessage_SendManifest_ {
	this := &BlobMessage_SendManifest_{}
	this.SendManifest = NewPopulatedBlobMessage_SendManifest(r, easy)
	return this
}
func NewPopulatedBlobMessage_FetchChunk_(r randyLibp2P, easy bool) *BlobMessage_FetchChunk_ {
	this := &BlobMessage_FetchChunk_{}
	this.FetchChunk = NewPopulatedBlobMessage_FetchChunk(r, easy)
	return this
}
func NewPopulatedBlobMessage_SendChunk_(r randyLibp2P, easy bool) *BlobMessage_SendChunk_ {
	this := &BlobMessage_SendChunk_{}
	this.SendChunk = NewPopulatedBlobMessage_SendChunk(r, easy)
	return this
}
func NewPopulatedBlobMessage_FetchManifest(r randyLibp2P, easy bool) *BlobMessage_FetchManifest {
	this := &BlobMessage_FetchManifest{}
	v8 := pb.NewPopulatedID(r, easy)
	this.BlobID = *v8
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBlobMessage_SendManifest(r randyLibp2P, easy bool) *BlobMessage_SendManifest {
	this := &BlobMessage_SendManifest{}
	v9 := pb.NewPopulatedManifest(r, easy)
	this.Manifest = *v9
	this.Exists = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBlobMessage_FetchChunk(r randyLibp2P, easy bool) *BlobMessage_FetchChunk {
	this := &BlobMessage_FetchChunk{}
	v10 := r.Intn(100)
	this.SHA3 = make([]byte, v10)
	for i := 0; i < v10; i++ {
		this.SHA3[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBlobMessage_SendChunk(r randyLibp2P, easy bool) *BlobMessage_SendChunk {
	this := &BlobMessage_SendChunk{}
	v11 := r.Intn(100)
	this.Chunk = make([]byte, v11)
	for i := 0; i < v11; i++ {
		this.Chunk[i] = byte(r.Intn(256))
	}
	this.Exists = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedHushMessage(r randyLibp2P, easy bool) *HushMessage {
	this := &HushMessage{}
	oneofNumber_Payload := []int32{1}[r.Intn(1)]
	switch oneofNumber_Payload {
	case 1:
		this.Payload = NewPopulatedHushMessage_PubkeyBundles_(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedHushMessage_PubkeyBundles_(r randyLibp2P, easy bool) *HushMessage_PubkeyBundles_ {
	this := &HushMessage_PubkeyBundles_{}
	this.PubkeyBundles = NewPopulatedHushMessage_PubkeyBundles(r, easy)
	return this
}
func NewPopulatedHushMessage_PubkeyBundles(r randyLibp2P, easy bool) *HushMessage_PubkeyBundles {
	this := &HushMessage_PubkeyBundles{}
	if r.Intn(5) != 0 {
		v12 := r.Intn(5)
		this.Bundles = make([]pb1.PubkeyBundle, v12)
		for i := 0; i < v12; i++ {
			v13 := pb1.NewPopulatedPubkeyBundle(r, easy)
			this.Bundles[i] = *v13
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTreeMessage(r randyLibp2P, easy bool) *TreeMessage {
	this := &TreeMessage{}
	oneofNumber_Payload := []int32{1, 2, 3, 4, 5}[r.Intn(5)]
	switch oneofNumber_Payload {
	case 1:
		this.Payload = NewPopulatedTreeMessage_Tx(r, easy)
	case 2:
		this.Payload = NewPopulatedTreeMessage_EncryptedTx_(r, easy)
	case 3:
		this.Payload = NewPopulatedTreeMessage_Subscribe_(r, easy)
	case 4:
		this.Payload = NewPopulatedTreeMessage_Ack_(r, easy)
	case 5:
		this.Payload = NewPopulatedTreeMessage_AnnounceP2PStateURI_(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTreeMessage_Tx(r randyLibp2P, easy bool) *TreeMessage_Tx {
	this := &TreeMessage_Tx{}
	this.Tx = pb2.NewPopulatedTx(r, easy)
	return this
}
func NewPopulatedTreeMessage_EncryptedTx_(r randyLibp2P, easy bool) *TreeMessage_EncryptedTx_ {
	this := &TreeMessage_EncryptedTx_{}
	this.EncryptedTx = NewPopulatedTreeMessage_EncryptedTx(r, easy)
	return this
}
func NewPopulatedTreeMessage_Subscribe_(r randyLibp2P, easy bool) *TreeMessage_Subscribe_ {
	this := &TreeMessage_Subscribe_{}
	this.Subscribe = NewPopulatedTreeMessage_Subscribe(r, easy)
	return this
}
func NewPopulatedTreeMessage_Ack_(r randyLibp2P, easy bool) *TreeMessage_Ack_ {
	this := &TreeMessage_Ack_{}
	this.Ack = NewPopulatedTreeMessage_Ack(r, easy)
	return this
}
func NewPopulatedTreeMessage_AnnounceP2PStateURI_(r randyLibp2P, easy bool) *TreeMessage_AnnounceP2PStateURI_ {
	this := &TreeMessage_AnnounceP2PStateURI_{}
	this.AnnounceP2PStateURI = NewPopulatedTreeMessage_AnnounceP2PStateURI(r, easy)
	return this
}
func NewPopulatedTreeMessage_EncryptedTx(r randyLibp2P, easy bool) *TreeMessage_EncryptedTx {
	this := &TreeMessage_EncryptedTx{}
	v14 := pb1.NewPopulatedGroupMessage(r, easy)
	this.EncryptedTx = *v14
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTreeMessage_Subscribe(r randyLibp2P, easy bool) *TreeMessage_Subscribe {
	this := &TreeMessage_Subscribe{}
	this.StateURI = string(randStringLibp2P(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTreeMessage_SubscriptionMsg(r randyLibp2P, easy bool) *TreeMessage_SubscriptionMsg {
	this := &TreeMessage_SubscriptionMsg{}
	oneofNumber_Payload := []int32{1, 2}[r.Intn(2)]
	switch oneofNumber_Payload {
	case 1:
		this.Payload = NewPopulatedTreeMessage_SubscriptionMsg_Tx(r, easy)
	case 2:
		this.Payload = NewPopulatedTreeMessage_SubscriptionMsg_EncryptedTx(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTreeMessage_SubscriptionMsg_Tx(r randyLibp2P, easy bool) *TreeMessage_SubscriptionMsg_Tx {
	this := &TreeMessage_SubscriptionMsg_Tx{}
	this.Tx = pb2.NewPopulatedTx(r, easy)
	return this
}
func NewPopulatedTreeMessage_SubscriptionMsg_EncryptedTx(r randyLibp2P, easy bool) *TreeMessage_SubscriptionMsg_EncryptedTx {
	this := &TreeMessage_SubscriptionMsg_EncryptedTx{}
	this.EncryptedTx = pb1.NewPopulatedGroupMessage(r, easy)
	return this
}
func NewPopulatedTreeMessage_Ack(r randyLibp2P, easy bool) *TreeMessage_Ack {
	this := &TreeMessage_Ack{}
	this.StateURI = string(randStringLibp2P(r))
	v15 := redwood_dev_state.NewPopulatedVersion(r)
	this.TxID = *v15
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTreeMessage_AnnounceP2PStateURI(r randyLibp2P, easy bool) *TreeMessage_AnnounceP2PStateURI {
	this := &TreeMessage_AnnounceP2PStateURI{}
	this.StateURI = string(randStringLibp2P(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPeerMessage(r randyLibp2P, easy bool) *PeerMessage {
	this := &PeerMessage{}
	oneofNumber_Payload := []int32{1}[r.Intn(1)]
	switch oneofNumber_Payload {
	case 1:
		this.Payload = NewPopulatedPeerMessage_AnnouncePeers_(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPeerMessage_AnnouncePeers_(r randyLibp2P, easy bool) *PeerMessage_AnnouncePeers_ {
	this := &PeerMessage_AnnouncePeers_{}
	this.AnnouncePeers = NewPopulatedPeerMessage_AnnouncePeers(r, easy)
	return this
}
func NewPopulatedPeerMessage_AnnouncePeers(r randyLibp2P, easy bool) *PeerMessage_AnnouncePeers {
	this := &PeerMessage_AnnouncePeers{}
	v16 := r.Intn(10)
	this.DialInfos = make([]redwood_dev_swarm.PeerDialInfo, v16)
	for i := 0; i < v16; i++ {
		v17 := redwood_dev_swarm.NewPopulatedPeerDialInfo(r)
		this.DialInfos[i] = *v17
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyLibp2P interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneLibp2P(r randyLibp2P) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringLibp2P(r randyLibp2P) string {
	v18 := r.Intn(100)
	tmps := make([]rune, v18)
	for i := 0; i < v18; i++ {
		tmps[i] = randUTF8RuneLibp2P(r)
	}
	return string(tmps)
}
func randUnrecognizedLibp2P(r randyLibp2P, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldLibp2P(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldLibp2P(dAtA []byte, r randyLibp2P, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateLibp2P(dAtA, uint64(key))
		v19 := r.Int63()
		if r.Intn(2) == 0 {
			v19 *= -1
		}
		dAtA = encodeVarintPopulateLibp2P(dAtA, uint64(v19))
	case 1:
		dAtA = encodeVarintPopulateLibp2P(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateLibp2P(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateLibp2P(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateLibp2P(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateLibp2P(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *AuthMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *AuthMessage_ChallengeRequest_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeRequest != nil {
		l = m.ChallengeRequest.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}
func (m *AuthMessage_Challenge_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Challenge != nil {
		l = m.Challenge.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}
func (m *AuthMessage_Signatures_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Signatures != nil {
		l = m.Signatures.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}
func (m *AuthMessage_Ucan_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ucan != nil {
		l = m.Ucan.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}
func (m *AuthMessage_ChallengeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AuthMessage_Challenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Challenge.Size()
	n += 1 + l + sovLibp2P(uint64(l))
	return n
}

func (m *AuthMessage_Signatures) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Challenges) > 0 {
		for _, e := range m.Challenges {
			l = e.Size()
			n += 1 + l + sovLibp2P(uint64(l))
		}
	}
	if len(m.Signatures) > 0 {
		for _, e := range m.Signatures {
			l = e.Size()
			n += 1 + l + sovLibp2P(uint64(l))
		}
	}
	if len(m.AsymEncPubkeys) > 0 {
		for _, e := range m.AsymEncPubkeys {
			l = e.Size()
			n += 1 + l + sovLibp2P(uint64(l))
		}
	}
	return n
}

func (m *AuthMessage_Ucan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ucan)
	if l > 0 {
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}

func (m *BlobMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *BlobMessage_FetchManifest_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FetchManifest != nil {
		l = m.FetchManifest.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}
func (m *BlobMessage_SendManifest_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SendManifest != nil {
		l = m.SendManifest.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}
func (m *BlobMessage_FetchChunk_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FetchChunk != nil {
		l = m.FetchChunk.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}
func (m *BlobMessage_SendChunk_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SendChunk != nil {
		l = m.SendChunk.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}
func (m *BlobMessage_FetchManifest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BlobID.Size()
	n += 1 + l + sovLibp2P(uint64(l))
	return n
}

func (m *BlobMessage_SendManifest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Manifest.Size()
	n += 1 + l + sovLibp2P(uint64(l))
	if m.Exists {
		n += 2
	}
	return n
}

func (m *BlobMessage_FetchChunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SHA3)
	if l > 0 {
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}

func (m *BlobMessage_SendChunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chunk)
	if l > 0 {
		n += 1 + l + sovLibp2P(uint64(l))
	}
	if m.Exists {
		n += 2
	}
	return n
}

func (m *HushMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *HushMessage_PubkeyBundles_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PubkeyBundles != nil {
		l = m.PubkeyBundles.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}
func (m *HushMessage_PubkeyBundles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Bundles) > 0 {
		for _, e := range m.Bundles {
			l = e.Size()
			n += 1 + l + sovLibp2P(uint64(l))
		}
	}
	return n
}

func (m *TreeMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *TreeMessage_Tx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tx != nil {
		l = m.Tx.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}
func (m *TreeMessage_EncryptedTx_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EncryptedTx != nil {
		l = m.EncryptedTx.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}
func (m *TreeMessage_Subscribe_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Subscribe != nil {
		l = m.Subscribe.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}
func (m *TreeMessage_Ack_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ack != nil {
		l = m.Ack.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}
func (m *TreeMessage_AnnounceP2PStateURI_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnnounceP2PStateURI != nil {
		l = m.AnnounceP2PStateURI.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}
func (m *TreeMessage_EncryptedTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EncryptedTx.Size()
	n += 1 + l + sovLibp2P(uint64(l))
	return n
}

func (m *TreeMessage_Subscribe) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StateURI)
	if l > 0 {
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}

func (m *TreeMessage_SubscriptionMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *TreeMessage_SubscriptionMsg_Tx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tx != nil {
		l = m.Tx.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}
func (m *TreeMessage_SubscriptionMsg_EncryptedTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EncryptedTx != nil {
		l = m.EncryptedTx.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}
func (m *TreeMessage_Ack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StateURI)
	if l > 0 {
		n += 1 + l + sovLibp2P(uint64(l))
	}
	l = m.TxID.Size()
	n += 1 + l + sovLibp2P(uint64(l))
	return n
}

func (m *TreeMessage_AnnounceP2PStateURI) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StateURI)
	if l > 0 {
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}

func (m *PeerMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *PeerMessage_AnnouncePeers_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnnouncePeers != nil {
		l = m.AnnouncePeers.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}
func (m *PeerMessage_AnnouncePeers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DialInfos) > 0 {
		for _, e := range m.DialInfos {
			l = e.Size()
			n += 1 + l + sovLibp2P(uint64(l))
		}
	}
	return n
}

func sovLibp2P(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLibp2P(x uint64) (n int) {
	return sovLibp2P(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AuthMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthMessage{`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthMessage_ChallengeRequest_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthMessage_ChallengeRequest_{`,
		`ChallengeRequest:` + strings.Replace(fmt.Sprintf("%v", this.ChallengeRequest), "AuthMessage_ChallengeRequest", "AuthMessage_ChallengeRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthMessage_Challenge_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthMessage_Challenge_{`,
		`Challenge:` + strings.Replace(fmt.Sprintf("%v", this.Challenge), "AuthMessage_Challenge", "AuthMessage_Challenge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthMessage_Signatures_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthMessage_Signatures_{`,
		`Signatures:` + strings.Replace(fmt.Sprintf("%v", this.Signatures), "AuthMessage_Signatures", "AuthMessage_Signatures", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthMessage_Ucan_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthMessage_Ucan_{`,
		`Ucan:` + strings.Replace(fmt.Sprintf("%v", this.Ucan), "AuthMessage_Ucan", "AuthMessage_Ucan", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthMessage_ChallengeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthMessage_ChallengeRequest{`,
		`}`,
	}, "")
	return s
}
func (this *AuthMessage_Challenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthMessage_Challenge{`,
		`Challenge:` + fmt.Sprintf("%v", this.Challenge) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthMessage_Signatures) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthMessage_Signatures{`,
		`Challenges:` + fmt.Sprintf("%v", this.Challenges) + `,`,
		`Signatures:` + fmt.Sprintf("%v", this.Signatures) + `,`,
		`AsymEncPubkeys:` + fmt.Sprintf("%v", this.AsymEncPubkeys) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthMessage_Ucan) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthMessage_Ucan{`,
		`Ucan:` + fmt.Sprintf("%v", this.Ucan) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BlobMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BlobMessage{`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BlobMessage_FetchManifest_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BlobMessage_FetchManifest_{`,
		`FetchManifest:` + strings.Replace(fmt.Sprintf("%v", this.FetchManifest), "BlobMessage_FetchManifest", "BlobMessage_FetchManifest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BlobMessage_SendManifest_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BlobMessage_SendManifest_{`,
		`SendManifest:` + strings.Replace(fmt.Sprintf("%v", this.SendManifest), "BlobMessage_SendManifest", "BlobMessage_SendManifest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BlobMessage_FetchChunk_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BlobMessage_FetchChunk_{`,
		`FetchChunk:` + strings.Replace(fmt.Sprintf("%v", this.FetchChunk), "BlobMessage_FetchChunk", "BlobMessage_FetchChunk", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BlobMessage_SendChunk_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BlobMessage_SendChunk_{`,
		`SendChunk:` + strings.Replace(fmt.Sprintf("%v", this.SendChunk), "BlobMessage_SendChunk", "BlobMessage_SendChunk", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BlobMessage_FetchManifest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BlobMessage_FetchManifest{`,
		`BlobID:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.BlobID), "ID", "pb.ID", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BlobMessage_SendManifest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BlobMessage_SendManifest{`,
		`Manifest:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Manifest), "Manifest", "pb.Manifest", 1), `&`, ``, 1) + `,`,
		`Exists:` + fmt.Sprintf("%v", this.Exists) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BlobMessage_FetchChunk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BlobMessage_FetchChunk{`,
		`SHA3:` + fmt.Sprintf("%v", this.SHA3) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BlobMessage_SendChunk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BlobMessage_SendChunk{`,
		`Chunk:` + fmt.Sprintf("%v", this.Chunk) + `,`,
		`Exists:` + fmt.Sprintf("%v", this.Exists) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HushMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HushMessage{`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HushMessage_PubkeyBundles_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HushMessage_PubkeyBundles_{`,
		`PubkeyBundles:` + strings.Replace(fmt.Sprintf("%v", this.PubkeyBundles), "HushMessage_PubkeyBundles", "HushMessage_PubkeyBundles", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HushMessage_PubkeyBundles) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForBundles := "[]PubkeyBundle{"
	for _, f := range this.Bundles {
		repeatedStringForBundles += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForBundles += "}"
	s := strings.Join([]string{`&HushMessage_PubkeyBundles{`,
		`Bundles:` + repeatedStringForBundles + `,`,
		`}`,
	}, "")
	return s
}
func (this *TreeMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TreeMessage{`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TreeMessage_Tx) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TreeMessage_Tx{`,
		`Tx:` + strings.Replace(fmt.Sprintf("%v", this.Tx), "Tx", "pb2.Tx", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TreeMessage_EncryptedTx_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TreeMessage_EncryptedTx_{`,
		`EncryptedTx:` + strings.Replace(fmt.Sprintf("%v", this.EncryptedTx), "TreeMessage_EncryptedTx", "TreeMessage_EncryptedTx", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TreeMessage_Subscribe_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TreeMessage_Subscribe_{`,
		`Subscribe:` + strings.Replace(fmt.Sprintf("%v", this.Subscribe), "TreeMessage_Subscribe", "TreeMessage_Subscribe", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TreeMessage_Ack_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TreeMessage_Ack_{`,
		`Ack:` + strings.Replace(fmt.Sprintf("%v", this.Ack), "TreeMessage_Ack", "TreeMessage_Ack", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TreeMessage_AnnounceP2PStateURI_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TreeMessage_AnnounceP2PStateURI_{`,
		`AnnounceP2PStateURI:` + strings.Replace(fmt.Sprintf("%v", this.AnnounceP2PStateURI), "TreeMessage_AnnounceP2PStateURI", "TreeMessage_AnnounceP2PStateURI", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TreeMessage_EncryptedTx) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TreeMessage_EncryptedTx{`,
		`EncryptedTx:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.EncryptedTx), "GroupMessage", "pb1.GroupMessage", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TreeMessage_Subscribe) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TreeMessage_Subscribe{`,
		`StateURI:` + fmt.Sprintf("%v", this.StateURI) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TreeMessage_SubscriptionMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TreeMessage_SubscriptionMsg{`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TreeMessage_SubscriptionMsg_Tx) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TreeMessage_SubscriptionMsg_Tx{`,
		`Tx:` + strings.Replace(fmt.Sprintf("%v", this.Tx), "Tx", "pb2.Tx", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TreeMessage_SubscriptionMsg_EncryptedTx) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TreeMessage_SubscriptionMsg_EncryptedTx{`,
		`EncryptedTx:` + strings.Replace(fmt.Sprintf("%v", this.EncryptedTx), "GroupMessage", "pb1.GroupMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TreeMessage_Ack) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TreeMessage_Ack{`,
		`StateURI:` + fmt.Sprintf("%v", this.StateURI) + `,`,
		`TxID:` + fmt.Sprintf("%v", this.TxID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TreeMessage_AnnounceP2PStateURI) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TreeMessage_AnnounceP2PStateURI{`,
		`StateURI:` + fmt.Sprintf("%v", this.StateURI) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeerMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeerMessage{`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeerMessage_AnnouncePeers_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeerMessage_AnnouncePeers_{`,
		`AnnouncePeers:` + strings.Replace(fmt.Sprintf("%v", this.AnnouncePeers), "PeerMessage_AnnouncePeers", "PeerMessage_AnnouncePeers", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeerMessage_AnnouncePeers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeerMessage_AnnouncePeers{`,
		`DialInfos:` + fmt.Sprintf("%v", this.DialInfos) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLibp2P(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AuthMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AuthMessage_ChallengeRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &AuthMessage_ChallengeRequest_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AuthMessage_Challenge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &AuthMessage_Challenge_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AuthMessage_Signatures{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &AuthMessage_Signatures_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ucan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AuthMessage_Ucan{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &AuthMessage_Ucan_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthMessage_ChallengeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthMessage_Challenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Challenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Challenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenge", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Challenge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthMessage_Signatures) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signatures: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signatures: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenges", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v redwood_dev_crypto.ChallengeMsg
			m.Challenges = append(m.Challenges, v)
			if err := m.Challenges[len(m.Challenges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v redwood_dev_crypto.Signature
			m.Signatures = append(m.Signatures, v)
			if err := m.Signatures[len(m.Signatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsymEncPubkeys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v redwood_dev_crypto.AsymEncPubkey
			m.AsymEncPubkeys = append(m.AsymEncPubkeys, v)
			if err := m.AsymEncPubkeys[len(m.AsymEncPubkeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthMessage_Ucan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ucan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ucan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ucan", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ucan = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlobMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlobMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlobMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FetchManifest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BlobMessage_FetchManifest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &BlobMessage_FetchManifest_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendManifest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BlobMessage_SendManifest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &BlobMessage_SendManifest_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FetchChunk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BlobMessage_FetchChunk{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &BlobMessage_FetchChunk_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendChunk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BlobMessage_SendChunk{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &BlobMessage_SendChunk_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlobMessage_FetchManifest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchManifest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchManifest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlobID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BlobID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlobMessage_SendManifest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendManifest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendManifest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manifest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Manifest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exists", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exists = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlobMessage_FetchChunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchChunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchChunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SHA3", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SHA3 = append(m.SHA3[:0], dAtA[iNdEx:postIndex]...)
			if m.SHA3 == nil {
				m.SHA3 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlobMessage_SendChunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendChunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendChunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chunk = append(m.Chunk[:0], dAtA[iNdEx:postIndex]...)
			if m.Chunk == nil {
				m.Chunk = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exists", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exists = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HushMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HushMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HushMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubkeyBundles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HushMessage_PubkeyBundles{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &HushMessage_PubkeyBundles_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HushMessage_PubkeyBundles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubkeyBundles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubkeyBundles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bundles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bundles = append(m.Bundles, pb1.PubkeyBundle{})
			if err := m.Bundles[len(m.Bundles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TreeMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TreeMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TreeMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &pb2.Tx{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &TreeMessage_Tx{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TreeMessage_EncryptedTx{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &TreeMessage_EncryptedTx_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscribe", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TreeMessage_Subscribe{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &TreeMessage_Subscribe_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TreeMessage_Ack{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &TreeMessage_Ack_{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnnounceP2PStateURI", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TreeMessage_AnnounceP2PStateURI{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &TreeMessage_AnnounceP2PStateURI_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TreeMessage_EncryptedTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncryptedTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncryptedTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EncryptedTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TreeMessage_Subscribe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subscribe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subscribe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TreeMessage_SubscriptionMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscriptionMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscriptionMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &pb2.Tx{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &TreeMessage_SubscriptionMsg_Tx{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &pb1.GroupMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &TreeMessage_SubscriptionMsg_EncryptedTx{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TreeMessage_Ack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TxID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TreeMessage_AnnounceP2PStateURI) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnnounceP2PStateURI: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnnounceP2PStateURI: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnnouncePeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PeerMessage_AnnouncePeers{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &PeerMessage_AnnouncePeers_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerMessage_AnnouncePeers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnnouncePeers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnnouncePeers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DialInfos", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v redwood_dev_swarm.PeerDialInfo
			m.DialInfos = append(m.DialInfos, v)
			if err := m.DialInfos[len(m.DialInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLibp2P(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLibp2P
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLibp2P
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLibp2P
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLibp2P        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLibp2P          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLibp2P = fmt.Errorf("proto: unexpected end of group")
)
