syntax = "proto3";

package Redwood.swarm.libp2p;
option go_package = "redwood.dev/swarm/libp2p/pb";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "blob/pb/blob.proto";
import "swarm/protohush/pb/hush.proto";

option (gogoproto.gostring_all) = true;
option (gogoproto.equal_all) = true;
option (gogoproto.verbose_equal_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;
option (gogoproto.populate_all) = true;
option (gogoproto.testgen_all) = false;
option (gogoproto.benchgen_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

message BlobMessage {
    oneof payload {
        FetchManifest fetchManifest = 1;
        SendManifest sendManifest = 2;
        FetchChunk fetchChunk = 3;
        SendChunk sendChunk = 4;
    }

    message FetchManifest {
        Redwood.blob.ID blobID = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "BlobID"];
    }

    message SendManifest {
        Redwood.blob.Manifest manifest = 1 [(gogoproto.nullable) = false];
        bool exists = 2;
    }

    message FetchChunk {
        bytes sha3 = 1 [(gogoproto.customname) = "SHA3"];
    }

    message SendChunk {
        bytes chunk = 1;
        bool exists = 2;
    }
}

message HushMessage {
    oneof payload {
        DHPubkeyAttestations dhPubkeyAttestations = 1;
        ProposeIndividualSession proposeIndividualSession = 2;
        RespondToIndividualSessionProposal respondToIndividualSessionProposal = 3;
        SendIndividualMessage sendIndividualMessage = 4;
        SendGroupMessage sendGroupMessage = 5;
    }

    message DHPubkeyAttestations {
        repeated Redwood.swarm.protohush.DHPubkeyAttestation attestations = 1 [(gogoproto.nullable) = false];
    }

    message ProposeIndividualSession {
        bytes encryptedProposal = 1;
    }

    message RespondToIndividualSessionProposal {
        Redwood.swarm.protohush.IndividualSessionResponse response = 1;
    }

    message SendIndividualMessage {
        Redwood.swarm.protohush.IndividualMessage message = 1;
    }

    message SendGroupMessage {
        Redwood.swarm.protohush.GroupMessage message = 1;
    }
}


