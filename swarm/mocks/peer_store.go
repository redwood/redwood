// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	crypto "redwood.dev/crypto"

	mock "github.com/stretchr/testify/mock"

	process "redwood.dev/process"

	swarm "redwood.dev/swarm"

	types "redwood.dev/types"
)

// PeerStore is an autogenerated mock type for the PeerStore type
type PeerStore struct {
	mock.Mock
}

// AddDialInfo provides a mock function with given fields: dialInfo, deviceUniqueID
func (_m *PeerStore) AddDialInfo(dialInfo swarm.PeerDialInfo, deviceUniqueID string) swarm.PeerEndpoint {
	ret := _m.Called(dialInfo, deviceUniqueID)

	var r0 swarm.PeerEndpoint
	if rf, ok := ret.Get(0).(func(swarm.PeerDialInfo, string) swarm.PeerEndpoint); ok {
		r0 = rf(dialInfo, deviceUniqueID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(swarm.PeerEndpoint)
		}
	}

	return r0
}

// AddVerifiedCredentials provides a mock function with given fields: dialInfo, deviceUniqueID, address, sigpubkey, encpubkey
func (_m *PeerStore) AddVerifiedCredentials(dialInfo swarm.PeerDialInfo, deviceUniqueID string, address types.Address, sigpubkey *crypto.SigningPublicKey, encpubkey *crypto.AsymEncPubkey) swarm.PeerEndpoint {
	ret := _m.Called(dialInfo, deviceUniqueID, address, sigpubkey, encpubkey)

	var r0 swarm.PeerEndpoint
	if rf, ok := ret.Get(0).(func(swarm.PeerDialInfo, string, types.Address, *crypto.SigningPublicKey, *crypto.AsymEncPubkey) swarm.PeerEndpoint); ok {
		r0 = rf(dialInfo, deviceUniqueID, address, sigpubkey, encpubkey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(swarm.PeerEndpoint)
		}
	}

	return r0
}

// AllDialInfos provides a mock function with given fields:
func (_m *PeerStore) AllDialInfos() map[swarm.PeerDialInfo]struct{} {
	ret := _m.Called()

	var r0 map[swarm.PeerDialInfo]struct{}
	if rf, ok := ret.Get(0).(func() map[swarm.PeerDialInfo]struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[swarm.PeerDialInfo]struct{})
		}
	}

	return r0
}

// Autoclose provides a mock function with given fields:
func (_m *PeerStore) Autoclose() {
	_m.Called()
}

// AutocloseWithCleanup provides a mock function with given fields: closeFn
func (_m *PeerStore) AutocloseWithCleanup(closeFn func()) {
	_m.Called(closeFn)
}

// Close provides a mock function with given fields:
func (_m *PeerStore) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Ctx provides a mock function with given fields:
func (_m *PeerStore) Ctx() context.Context {
	ret := _m.Called()

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// DebugPrint provides a mock function with given fields:
func (_m *PeerStore) DebugPrint() {
	_m.Called()
}

// Done provides a mock function with given fields:
func (_m *PeerStore) Done() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// Go provides a mock function with given fields: ctx, name, fn
func (_m *PeerStore) Go(ctx context.Context, name string, fn func(context.Context)) <-chan struct{} {
	ret := _m.Called(ctx, name, fn)

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func(context.Context, string, func(context.Context)) <-chan struct{}); ok {
		r0 = rf(ctx, name, fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// IsKnownPeer provides a mock function with given fields: dialInfo
func (_m *PeerStore) IsKnownPeer(dialInfo swarm.PeerDialInfo) bool {
	ret := _m.Called(dialInfo)

	var r0 bool
	if rf, ok := ret.Get(0).(func(swarm.PeerDialInfo) bool); ok {
		r0 = rf(dialInfo)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *PeerStore) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewChild provides a mock function with given fields: ctx, name
func (_m *PeerStore) NewChild(ctx context.Context, name string) *process.Process {
	ret := _m.Called(ctx, name)

	var r0 *process.Process
	if rf, ok := ret.Get(0).(func(context.Context, string) *process.Process); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*process.Process)
		}
	}

	return r0
}

// OnNewUnverifiedPeer provides a mock function with given fields: fn
func (_m *PeerStore) OnNewUnverifiedPeer(fn func(swarm.PeerDialInfo)) {
	_m.Called(fn)
}

// OnNewVerifiedPeer provides a mock function with given fields: fn
func (_m *PeerStore) OnNewVerifiedPeer(fn func(swarm.PeerDevice)) {
	_m.Called(fn)
}

// PeerEndpoint provides a mock function with given fields: dialInfo
func (_m *PeerStore) PeerEndpoint(dialInfo swarm.PeerDialInfo) swarm.PeerEndpoint {
	ret := _m.Called(dialInfo)

	var r0 swarm.PeerEndpoint
	if rf, ok := ret.Get(0).(func(swarm.PeerDialInfo) swarm.PeerEndpoint); ok {
		r0 = rf(dialInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(swarm.PeerEndpoint)
		}
	}

	return r0
}

// PeerWithDeviceUniqueID provides a mock function with given fields: deviceUniqueID
func (_m *PeerStore) PeerWithDeviceUniqueID(deviceUniqueID string) (swarm.PeerDevice, bool) {
	ret := _m.Called(deviceUniqueID)

	var r0 swarm.PeerDevice
	if rf, ok := ret.Get(0).(func(string) swarm.PeerDevice); ok {
		r0 = rf(deviceUniqueID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(swarm.PeerDevice)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(deviceUniqueID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Peers provides a mock function with given fields:
func (_m *PeerStore) Peers() []swarm.PeerDevice {
	ret := _m.Called()

	var r0 []swarm.PeerDevice
	if rf, ok := ret.Get(0).(func() []swarm.PeerDevice); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]swarm.PeerDevice)
		}
	}

	return r0
}

// PeersFromTransport provides a mock function with given fields: transportName
func (_m *PeerStore) PeersFromTransport(transportName string) []swarm.PeerEndpoint {
	ret := _m.Called(transportName)

	var r0 []swarm.PeerEndpoint
	if rf, ok := ret.Get(0).(func(string) []swarm.PeerEndpoint); ok {
		r0 = rf(transportName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]swarm.PeerEndpoint)
		}
	}

	return r0
}

// PeersServingStateURI provides a mock function with given fields: stateURI
func (_m *PeerStore) PeersServingStateURI(stateURI string) []swarm.PeerDevice {
	ret := _m.Called(stateURI)

	var r0 []swarm.PeerDevice
	if rf, ok := ret.Get(0).(func(string) []swarm.PeerDevice); ok {
		r0 = rf(stateURI)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]swarm.PeerDevice)
		}
	}

	return r0
}

// PeersWithAddress provides a mock function with given fields: address
func (_m *PeerStore) PeersWithAddress(address types.Address) []swarm.PeerDevice {
	ret := _m.Called(address)

	var r0 []swarm.PeerDevice
	if rf, ok := ret.Get(0).(func(types.Address) []swarm.PeerDevice); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]swarm.PeerDevice)
		}
	}

	return r0
}

// ProcessTree provides a mock function with given fields:
func (_m *PeerStore) ProcessTree() map[string]interface{} {
	ret := _m.Called()

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// RemovePeers provides a mock function with given fields: deviceUniqueIDs
func (_m *PeerStore) RemovePeers(deviceUniqueIDs []string) error {
	ret := _m.Called(deviceUniqueIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(deviceUniqueIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SpawnChild provides a mock function with given fields: ctx, child
func (_m *PeerStore) SpawnChild(ctx context.Context, child process.Spawnable) error {
	ret := _m.Called(ctx, child)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, process.Spawnable) error); ok {
		r0 = rf(ctx, child)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *PeerStore) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// State provides a mock function with given fields:
func (_m *PeerStore) State() process.State {
	ret := _m.Called()

	var r0 process.State
	if rf, ok := ret.Get(0).(func() process.State); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(process.State)
	}

	return r0
}

// UnverifiedPeers provides a mock function with given fields:
func (_m *PeerStore) UnverifiedPeers() []swarm.PeerDialInfo {
	ret := _m.Called()

	var r0 []swarm.PeerDialInfo
	if rf, ok := ret.Get(0).(func() []swarm.PeerDialInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]swarm.PeerDialInfo)
		}
	}

	return r0
}

// VerifiedPeers provides a mock function with given fields:
func (_m *PeerStore) VerifiedPeers() []swarm.PeerDevice {
	ret := _m.Called()

	var r0 []swarm.PeerDevice
	if rf, ok := ret.Get(0).(func() []swarm.PeerDevice); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]swarm.PeerDevice)
		}
	}

	return r0
}

type mockConstructorTestingTNewPeerStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewPeerStore creates a new instance of PeerStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPeerStore(t mockConstructorTestingTNewPeerStore) *PeerStore {
	mock := &PeerStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
