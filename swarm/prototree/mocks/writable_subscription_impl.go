// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	state "redwood.dev/state"

	tree "redwood.dev/tree"

	types "redwood.dev/types"
)

// WritableSubscriptionImpl is an autogenerated mock type for the WritableSubscriptionImpl type
type WritableSubscriptionImpl struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *WritableSubscriptionImpl) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Closed provides a mock function with given fields:
func (_m *WritableSubscriptionImpl) Closed() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// Put provides a mock function with given fields: ctx, stateURI, tx, _a3, leaves
func (_m *WritableSubscriptionImpl) Put(ctx context.Context, stateURI string, tx *tree.Tx, _a3 state.Node, leaves []types.ID) error {
	ret := _m.Called(ctx, stateURI, tx, _a3, leaves)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *tree.Tx, state.Node, []types.ID) error); ok {
		r0 = rf(ctx, stateURI, tx, _a3, leaves)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StateURI provides a mock function with given fields:
func (_m *WritableSubscriptionImpl) StateURI() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// String provides a mock function with given fields:
func (_m *WritableSubscriptionImpl) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
