// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	crypto "redwood.dev/crypto"

	mock "github.com/stretchr/testify/mock"

	pb "redwood.dev/swarm/protohush/pb"

	prototree "redwood.dev/swarm/prototree"

	state "redwood.dev/state"

	swarm "redwood.dev/swarm"

	time "time"

	treepb "redwood.dev/tree/pb"

	types "redwood.dev/types"
)

// TreePeerConn is an autogenerated mock type for the TreePeerConn type
type TreePeerConn struct {
	mock.Mock
}

// Ack provides a mock function with given fields: stateURI, txID
func (_m *TreePeerConn) Ack(stateURI string, txID state.Version) error {
	ret := _m.Called(stateURI, txID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, state.Version) error); ok {
		r0 = rf(stateURI, txID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddStateURI provides a mock function with given fields: stateURI
func (_m *TreePeerConn) AddStateURI(stateURI string) {
	_m.Called(stateURI)
}

// Addresses provides a mock function with given fields:
func (_m *TreePeerConn) Addresses() types.Set[types.Address] {
	ret := _m.Called()

	var r0 types.Set[types.Address]
	if rf, ok := ret.Get(0).(func() types.Set[types.Address]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Set[types.Address])
		}
	}

	return r0
}

// AnnounceP2PStateURI provides a mock function with given fields: ctx, stateURI
func (_m *TreePeerConn) AnnounceP2PStateURI(ctx context.Context, stateURI string) error {
	ret := _m.Called(ctx, stateURI)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, stateURI)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *TreePeerConn) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceUniqueID provides a mock function with given fields:
func (_m *TreePeerConn) DeviceUniqueID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DialInfo provides a mock function with given fields:
func (_m *TreePeerConn) DialInfo() swarm.PeerDialInfo {
	ret := _m.Called()

	var r0 swarm.PeerDialInfo
	if rf, ok := ret.Get(0).(func() swarm.PeerDialInfo); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(swarm.PeerDialInfo)
	}

	return r0
}

// Dialable provides a mock function with given fields:
func (_m *TreePeerConn) Dialable() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Endpoint provides a mock function with given fields: dialInfo
func (_m *TreePeerConn) Endpoint(dialInfo swarm.PeerDialInfo) (swarm.PeerEndpoint, bool) {
	ret := _m.Called(dialInfo)

	var r0 swarm.PeerEndpoint
	if rf, ok := ret.Get(0).(func(swarm.PeerDialInfo) swarm.PeerEndpoint); ok {
		r0 = rf(dialInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(swarm.PeerEndpoint)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(swarm.PeerDialInfo) bool); ok {
		r1 = rf(dialInfo)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Endpoints provides a mock function with given fields:
func (_m *TreePeerConn) Endpoints() map[swarm.PeerDialInfo]swarm.PeerEndpoint {
	ret := _m.Called()

	var r0 map[swarm.PeerDialInfo]swarm.PeerEndpoint
	if rf, ok := ret.Get(0).(func() map[swarm.PeerDialInfo]swarm.PeerEndpoint); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[swarm.PeerDialInfo]swarm.PeerEndpoint)
		}
	}

	return r0
}

// EnsureConnected provides a mock function with given fields: ctx
func (_m *TreePeerConn) EnsureConnected(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Failures provides a mock function with given fields:
func (_m *TreePeerConn) Failures() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// LastContact provides a mock function with given fields:
func (_m *TreePeerConn) LastContact() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// LastFailure provides a mock function with given fields:
func (_m *TreePeerConn) LastFailure() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// PublicKeys provides a mock function with given fields: addr
func (_m *TreePeerConn) PublicKeys(addr types.Address) (*crypto.SigningPublicKey, *crypto.AsymEncPubkey) {
	ret := _m.Called(addr)

	var r0 *crypto.SigningPublicKey
	if rf, ok := ret.Get(0).(func(types.Address) *crypto.SigningPublicKey); ok {
		r0 = rf(addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crypto.SigningPublicKey)
		}
	}

	var r1 *crypto.AsymEncPubkey
	if rf, ok := ret.Get(1).(func(types.Address) *crypto.AsymEncPubkey); ok {
		r1 = rf(addr)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*crypto.AsymEncPubkey)
		}
	}

	return r0, r1
}

// Ready provides a mock function with given fields:
func (_m *TreePeerConn) Ready() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RemainingBackoff provides a mock function with given fields:
func (_m *TreePeerConn) RemainingBackoff() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// RemoveStateURI provides a mock function with given fields: stateURI
func (_m *TreePeerConn) RemoveStateURI(stateURI string) {
	_m.Called(stateURI)
}

// SendPrivateTx provides a mock function with given fields: ctx, encryptedTx
func (_m *TreePeerConn) SendPrivateTx(ctx context.Context, encryptedTx pb.GroupMessage) error {
	ret := _m.Called(ctx, encryptedTx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pb.GroupMessage) error); ok {
		r0 = rf(ctx, encryptedTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendTx provides a mock function with given fields: ctx, tx
func (_m *TreePeerConn) SendTx(ctx context.Context, tx treepb.Tx) error {
	ret := _m.Called(ctx, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, treepb.Tx) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDeviceUniqueID provides a mock function with given fields: id
func (_m *TreePeerConn) SetDeviceUniqueID(id string) {
	_m.Called(id)
}

// StateURIs provides a mock function with given fields:
func (_m *TreePeerConn) StateURIs() types.Set[string] {
	ret := _m.Called()

	var r0 types.Set[string]
	if rf, ok := ret.Get(0).(func() types.Set[string]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Set[string])
		}
	}

	return r0
}

// Subscribe provides a mock function with given fields: ctx, stateURI
func (_m *TreePeerConn) Subscribe(ctx context.Context, stateURI string) (prototree.ReadableSubscription, error) {
	ret := _m.Called(ctx, stateURI)

	var r0 prototree.ReadableSubscription
	if rf, ok := ret.Get(0).(func(context.Context, string) prototree.ReadableSubscription); ok {
		r0 = rf(ctx, stateURI)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(prototree.ReadableSubscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, stateURI)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transport provides a mock function with given fields:
func (_m *TreePeerConn) Transport() swarm.Transport {
	ret := _m.Called()

	var r0 swarm.Transport
	if rf, ok := ret.Get(0).(func() swarm.Transport); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(swarm.Transport)
		}
	}

	return r0
}

// UpdateConnStats provides a mock function with given fields: success
func (_m *TreePeerConn) UpdateConnStats(success bool) {
	_m.Called(success)
}

type mockConstructorTestingTNewTreePeerConn interface {
	mock.TestingT
	Cleanup(func())
}

// NewTreePeerConn creates a new instance of TreePeerConn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTreePeerConn(t mockConstructorTestingTNewTreePeerConn) *TreePeerConn {
	mock := &TreePeerConn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
