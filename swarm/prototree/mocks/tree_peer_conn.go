// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	context "context"

	crypto "redwood.dev/crypto"

	mock "github.com/stretchr/testify/mock"

	prototree "redwood.dev/swarm/prototree"

	state "redwood.dev/state"

	swarm "redwood.dev/swarm"

	time "time"

	tree "redwood.dev/tree"

	types "redwood.dev/types"
)

// TreePeerConn is an autogenerated mock type for the TreePeerConn type
type TreePeerConn struct {
	mock.Mock
}

// Ack provides a mock function with given fields: stateURI, txID
func (_m *TreePeerConn) Ack(stateURI string, txID types.ID) error {
	ret := _m.Called(stateURI, txID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, types.ID) error); ok {
		r0 = rf(stateURI, txID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddStateURI provides a mock function with given fields: stateURI
func (_m *TreePeerConn) AddStateURI(stateURI string) {
	_m.Called(stateURI)
}

// Addresses provides a mock function with given fields:
func (_m *TreePeerConn) Addresses() []types.Address {
	ret := _m.Called()

	var r0 []types.Address
	if rf, ok := ret.Get(0).(func() []types.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Address)
		}
	}

	return r0
}

// AnnouncePeers provides a mock function with given fields: ctx, peerDialInfos
func (_m *TreePeerConn) AnnouncePeers(ctx context.Context, peerDialInfos []swarm.PeerDialInfo) error {
	ret := _m.Called(ctx, peerDialInfos)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []swarm.PeerDialInfo) error); ok {
		r0 = rf(ctx, peerDialInfos)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *TreePeerConn) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceSpecificID provides a mock function with given fields:
func (_m *TreePeerConn) DeviceSpecificID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DialInfo provides a mock function with given fields:
func (_m *TreePeerConn) DialInfo() swarm.PeerDialInfo {
	ret := _m.Called()

	var r0 swarm.PeerDialInfo
	if rf, ok := ret.Get(0).(func() swarm.PeerDialInfo); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(swarm.PeerDialInfo)
	}

	return r0
}

// EnsureConnected provides a mock function with given fields: ctx
func (_m *TreePeerConn) EnsureConnected(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Failures provides a mock function with given fields:
func (_m *TreePeerConn) Failures() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// LastContact provides a mock function with given fields:
func (_m *TreePeerConn) LastContact() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// LastFailure provides a mock function with given fields:
func (_m *TreePeerConn) LastFailure() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// PublicKeys provides a mock function with given fields: addr
func (_m *TreePeerConn) PublicKeys(addr types.Address) (crypto.SigningPublicKey, crypto.AsymEncPubkey) {
	ret := _m.Called(addr)

	var r0 crypto.SigningPublicKey
	if rf, ok := ret.Get(0).(func(types.Address) crypto.SigningPublicKey); ok {
		r0 = rf(addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.SigningPublicKey)
		}
	}

	var r1 crypto.AsymEncPubkey
	if rf, ok := ret.Get(1).(func(types.Address) crypto.AsymEncPubkey); ok {
		r1 = rf(addr)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(crypto.AsymEncPubkey)
		}
	}

	return r0, r1
}

// Put provides a mock function with given fields: ctx, tx, _a2, leaves
func (_m *TreePeerConn) Put(ctx context.Context, tx *tree.Tx, _a2 state.Node, leaves []types.ID) error {
	ret := _m.Called(ctx, tx, _a2, leaves)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *tree.Tx, state.Node, []types.ID) error); ok {
		r0 = rf(ctx, tx, _a2, leaves)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Ready provides a mock function with given fields:
func (_m *TreePeerConn) Ready() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RemainingBackoff provides a mock function with given fields:
func (_m *TreePeerConn) RemainingBackoff() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// RemoveStateURI provides a mock function with given fields: stateURI
func (_m *TreePeerConn) RemoveStateURI(stateURI string) {
	_m.Called(stateURI)
}

// StateURIs provides a mock function with given fields:
func (_m *TreePeerConn) StateURIs() types.StringSet {
	ret := _m.Called()

	var r0 types.StringSet
	if rf, ok := ret.Get(0).(func() types.StringSet); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.StringSet)
		}
	}

	return r0
}

// Subscribe provides a mock function with given fields: ctx, stateURI
func (_m *TreePeerConn) Subscribe(ctx context.Context, stateURI string) (prototree.ReadableSubscription, error) {
	ret := _m.Called(ctx, stateURI)

	var r0 prototree.ReadableSubscription
	if rf, ok := ret.Get(0).(func(context.Context, string) prototree.ReadableSubscription); ok {
		r0 = rf(ctx, stateURI)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(prototree.ReadableSubscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, stateURI)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transport provides a mock function with given fields:
func (_m *TreePeerConn) Transport() swarm.Transport {
	ret := _m.Called()

	var r0 swarm.Transport
	if rf, ok := ret.Get(0).(func() swarm.Transport); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(swarm.Transport)
		}
	}

	return r0
}

// UpdateConnStats provides a mock function with given fields: success
func (_m *TreePeerConn) UpdateConnStats(success bool) {
	_m.Called(success)
}
